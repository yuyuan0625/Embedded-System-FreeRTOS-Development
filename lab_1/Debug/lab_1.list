
lab_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08004878  08004878  00005878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048c8  080048c8  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  080048c8  080048c8  000058c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048d0  080048d0  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048d0  080048d0  000058d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048d4  080048d4  000058d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080048d8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006010  2**0
                  CONTENTS
 10 .bss          00012e0c  20000010  20000010  00006010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012e1c  20012e1c  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dd11  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002637  00000000  00000000  00013d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e70  00000000  00000000  00016388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b1b  00000000  00000000  000171f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022010  00000000  00000000  00017d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000105ed  00000000  00000000  00039d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d05d1  00000000  00000000  0004a310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011a8e1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bbc  00000000  00000000  0011a924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  0011e4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004860 	.word	0x08004860

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004860 	.word	0x08004860

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fbf5 	bl	8000cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f90f 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f977 	bl	80007c0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  MsgQueue = xQueueCreate(1,sizeof(unsigned int));
 80004d2:	2200      	movs	r2, #0
 80004d4:	2104      	movs	r1, #4
 80004d6:	2001      	movs	r0, #1
 80004d8:	f001 ff54 	bl	8002384 <xQueueGenericCreate>
 80004dc:	4603      	mov	r3, r0
 80004de:	4a0f      	ldr	r2, [pc, #60]	@ (800051c <main+0x5c>)
 80004e0:	6013      	str	r3, [r2, #0]
  TaskHandle_t xTaskLEDHandle = NULL;
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
  TaskHandle_t xTaskBlueButtonHandle = NULL;
 80004e6:	2300      	movs	r3, #0
 80004e8:	603b      	str	r3, [r7, #0]
  // Create Blue_Button task
  xTaskCreate(vTaskBlueButtonControl, "Blue_Button_Control", 128, NULL, 1, &xTaskBlueButtonHandle);
 80004ea:	463b      	mov	r3, r7
 80004ec:	9301      	str	r3, [sp, #4]
 80004ee:	2301      	movs	r3, #1
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	2300      	movs	r3, #0
 80004f4:	2280      	movs	r2, #128	@ 0x80
 80004f6:	490a      	ldr	r1, [pc, #40]	@ (8000520 <main+0x60>)
 80004f8:	480a      	ldr	r0, [pc, #40]	@ (8000524 <main+0x64>)
 80004fa:	f002 fb91 	bl	8002c20 <xTaskCreate>
  // Create LED_Control task
  xTaskCreate(vTaskLEDControl, "LED_Control", 128, NULL, 1, &xTaskLEDHandle);
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	9301      	str	r3, [sp, #4]
 8000502:	2301      	movs	r3, #1
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	2300      	movs	r3, #0
 8000508:	2280      	movs	r2, #128	@ 0x80
 800050a:	4907      	ldr	r1, [pc, #28]	@ (8000528 <main+0x68>)
 800050c:	4807      	ldr	r0, [pc, #28]	@ (800052c <main+0x6c>)
 800050e:	f002 fb87 	bl	8002c20 <xTaskCreate>
  vTaskStartScheduler(); // Start RTOS task scheduler
 8000512:	f002 fcfb 	bl	8002f0c <vTaskStartScheduler>
    /* USER CODE END 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000516:	bf00      	nop
 8000518:	e7fd      	b.n	8000516 <main+0x56>
 800051a:	bf00      	nop
 800051c:	2000002c 	.word	0x2000002c
 8000520:	08004878 	.word	0x08004878
 8000524:	08000531 	.word	0x08000531
 8000528:	0800488c 	.word	0x0800488c
 800052c:	080005a9 	.word	0x080005a9

08000530 <vTaskBlueButtonControl>:
  }
  /* USER CODE END 3 */
}

void vTaskBlueButtonControl(void* pvPatameters)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  unsigned int state = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	60bb      	str	r3, [r7, #8]
  unsigned int count = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]

  for(;;) {
    // 檢查Pin腳有無訊號傳入
    if (HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, GPIO_PIN_0))
 8000540:	2101      	movs	r1, #1
 8000542:	4816      	ldr	r0, [pc, #88]	@ (800059c <vTaskBlueButtonControl+0x6c>)
 8000544:	f000 fe76 	bl	8001234 <HAL_GPIO_ReadPin>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d0f8      	beq.n	8000540 <vTaskBlueButtonControl+0x10>
    {
      vTaskDelay(pdMS_TO_TICKS(100)); // Debounce
 800054e:	2064      	movs	r0, #100	@ 0x64
 8000550:	f002 fca6 	bl	8002ea0 <vTaskDelay>
      // 等待按鈕釋放避免產生多次觸發
      while (HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, GPIO_PIN_0))
 8000554:	e002      	b.n	800055c <vTaskBlueButtonControl+0x2c>
      {
        vTaskDelay(pdMS_TO_TICKS(10));
 8000556:	200a      	movs	r0, #10
 8000558:	f002 fca2 	bl	8002ea0 <vTaskDelay>
      while (HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, GPIO_PIN_0))
 800055c:	2101      	movs	r1, #1
 800055e:	480f      	ldr	r0, [pc, #60]	@ (800059c <vTaskBlueButtonControl+0x6c>)
 8000560:	f000 fe68 	bl	8001234 <HAL_GPIO_ReadPin>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d1f5      	bne.n	8000556 <vTaskBlueButtonControl+0x26>
      }

      // 更新 state
      ++count;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	3301      	adds	r3, #1
 800056e:	60fb      	str	r3, [r7, #12]
      state = count & 0x01;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	60bb      	str	r3, [r7, #8]

      // 透過 MsgQueue 通知 vTaskLEDControl 現在 LED 的顯示狀態
      xQueueSend(MsgQueue, &state, pdMS_TO_TICKS(10));
 8000578:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <vTaskBlueButtonControl+0x70>)
 800057a:	6818      	ldr	r0, [r3, #0]
 800057c:	f107 0108 	add.w	r1, r7, #8
 8000580:	2300      	movs	r3, #0
 8000582:	220a      	movs	r2, #10
 8000584:	f001 ff5e 	bl	8002444 <xQueueGenericSend>

      // 主動讓出 CPU 給其他任務
      taskYIELD();
 8000588:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <vTaskBlueButtonControl+0x74>)
 800058a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	f3bf 8f4f 	dsb	sy
 8000594:	f3bf 8f6f 	isb	sy
    if (HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, GPIO_PIN_0))
 8000598:	e7d2      	b.n	8000540 <vTaskBlueButtonControl+0x10>
 800059a:	bf00      	nop
 800059c:	40020000 	.word	0x40020000
 80005a0:	2000002c 	.word	0x2000002c
 80005a4:	e000ed04 	.word	0xe000ed04

080005a8 <vTaskLEDControl>:
    }
  }
}

void vTaskLEDControl(void* pvParameters)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  unsigned int led_state = 1; // LED 預設狀態為 1 (循環三色)
 80005b0:	2301      	movs	r3, #1
 80005b2:	60bb      	str	r3, [r7, #8]

  for (;;)
  {
    unsigned int curr = 0; // 紀錄當前 LED 燈的狀態 (對應到 switch case)
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]

    // **模式 1: 三色循環**
    curr = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
    while (led_state == 1)
 80005bc:	e054      	b.n	8000668 <vTaskLEDControl+0xc0>
    {
      switch (curr)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	2b02      	cmp	r3, #2
 80005c2:	d02b      	beq.n	800061c <vTaskLEDControl+0x74>
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	d839      	bhi.n	800063e <vTaskLEDControl+0x96>
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d003      	beq.n	80005d8 <vTaskLEDControl+0x30>
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d011      	beq.n	80005fa <vTaskLEDControl+0x52>
 80005d6:	e032      	b.n	800063e <vTaskLEDControl+0x96>
      {
        case 0:
          // **紅燈亮 1 秒**
          HAL_GPIO_WritePin(RED_LED_GPIO_Port, GPIO_PIN_14, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005de:	4840      	ldr	r0, [pc, #256]	@ (80006e0 <vTaskLEDControl+0x138>)
 80005e0:	f000 fe40 	bl	8001264 <HAL_GPIO_WritePin>
          vTaskDelay(pdMS_TO_TICKS(1000));
 80005e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005e8:	f002 fc5a 	bl	8002ea0 <vTaskDelay>
          HAL_GPIO_WritePin(RED_LED_GPIO_Port, GPIO_PIN_14, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005f2:	483b      	ldr	r0, [pc, #236]	@ (80006e0 <vTaskLEDControl+0x138>)
 80005f4:	f000 fe36 	bl	8001264 <HAL_GPIO_WritePin>
          break;
 80005f8:	e021      	b.n	800063e <vTaskLEDControl+0x96>
        case 1:
          // **橙燈亮 1 秒**
          HAL_GPIO_WritePin(ORANGE_LED_GPIO_Port, GPIO_PIN_13, GPIO_PIN_SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000600:	4837      	ldr	r0, [pc, #220]	@ (80006e0 <vTaskLEDControl+0x138>)
 8000602:	f000 fe2f 	bl	8001264 <HAL_GPIO_WritePin>
          vTaskDelay(pdMS_TO_TICKS(1000));
 8000606:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800060a:	f002 fc49 	bl	8002ea0 <vTaskDelay>
          HAL_GPIO_WritePin(ORANGE_LED_GPIO_Port, GPIO_PIN_13, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000614:	4832      	ldr	r0, [pc, #200]	@ (80006e0 <vTaskLEDControl+0x138>)
 8000616:	f000 fe25 	bl	8001264 <HAL_GPIO_WritePin>
          break;
 800061a:	e010      	b.n	800063e <vTaskLEDControl+0x96>
        case 2:
          // **綠燈亮 1 秒**
          HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GPIO_PIN_12, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000622:	482f      	ldr	r0, [pc, #188]	@ (80006e0 <vTaskLEDControl+0x138>)
 8000624:	f000 fe1e 	bl	8001264 <HAL_GPIO_WritePin>
          vTaskDelay(pdMS_TO_TICKS(1000));
 8000628:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800062c:	f002 fc38 	bl	8002ea0 <vTaskDelay>
          HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GPIO_PIN_12, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000636:	482a      	ldr	r0, [pc, #168]	@ (80006e0 <vTaskLEDControl+0x138>)
 8000638:	f000 fe14 	bl	8001264 <HAL_GPIO_WritePin>
          break;
 800063c:	bf00      	nop
      }

      // **循環切換 LED 顏色**
      ++curr;
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	3301      	adds	r3, #1
 8000642:	60fb      	str	r3, [r7, #12]
      curr = curr % 3; // 確保 curr 在 0~2 之間循環
 8000644:	68fa      	ldr	r2, [r7, #12]
 8000646:	4b27      	ldr	r3, [pc, #156]	@ (80006e4 <vTaskLEDControl+0x13c>)
 8000648:	fba3 1302 	umull	r1, r3, r3, r2
 800064c:	0859      	lsrs	r1, r3, #1
 800064e:	460b      	mov	r3, r1
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	440b      	add	r3, r1
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	60fb      	str	r3, [r7, #12]

      // **檢查訊息佇列 (非阻塞)**
      // 若有新的 LED 狀態則更新
      xQueueReceive(MsgQueue, &led_state, 0);
 8000658:	4b23      	ldr	r3, [pc, #140]	@ (80006e8 <vTaskLEDControl+0x140>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f107 0108 	add.w	r1, r7, #8
 8000660:	2200      	movs	r2, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f002 f88c 	bl	8002780 <xQueueReceive>
    while (led_state == 1)
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d0a7      	beq.n	80005be <vTaskLEDControl+0x16>
    }

    // **模式 2: 橙燈閃爍**
    curr = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
    while (led_state == 0)
 8000672:	e031      	b.n	80006d8 <vTaskLEDControl+0x130>
    {
      switch (curr)
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d003      	beq.n	8000682 <vTaskLEDControl+0xda>
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d011      	beq.n	80006a4 <vTaskLEDControl+0xfc>
 8000680:	e01b      	b.n	80006ba <vTaskLEDControl+0x112>
      {
        case 0:
          // **橙燈亮 2 秒**
          HAL_GPIO_WritePin(ORANGE_LED_GPIO_Port, GPIO_PIN_13, GPIO_PIN_SET);
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000688:	4815      	ldr	r0, [pc, #84]	@ (80006e0 <vTaskLEDControl+0x138>)
 800068a:	f000 fdeb 	bl	8001264 <HAL_GPIO_WritePin>
          vTaskDelay(pdMS_TO_TICKS(2000));
 800068e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000692:	f002 fc05 	bl	8002ea0 <vTaskDelay>
          HAL_GPIO_WritePin(ORANGE_LED_GPIO_Port, GPIO_PIN_13, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800069c:	4810      	ldr	r0, [pc, #64]	@ (80006e0 <vTaskLEDControl+0x138>)
 800069e:	f000 fde1 	bl	8001264 <HAL_GPIO_WritePin>
          break;
 80006a2:	e00a      	b.n	80006ba <vTaskLEDControl+0x112>
        case 1:
          // **橙燈滅 2 秒**
          HAL_GPIO_WritePin(ORANGE_LED_GPIO_Port, GPIO_PIN_13, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006aa:	480d      	ldr	r0, [pc, #52]	@ (80006e0 <vTaskLEDControl+0x138>)
 80006ac:	f000 fdda 	bl	8001264 <HAL_GPIO_WritePin>
          vTaskDelay(pdMS_TO_TICKS(2000));
 80006b0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006b4:	f002 fbf4 	bl	8002ea0 <vTaskDelay>
          break;
 80006b8:	bf00      	nop
      }

      // **切換閃爍狀態**
      ++curr;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	3301      	adds	r3, #1
 80006be:	60fb      	str	r3, [r7, #12]
      curr = curr & 0x01; // 讓 curr 在 0 和 1 之間循環
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	60fb      	str	r3, [r7, #12]

      // **檢查訊息佇列 (非阻塞)**
      xQueueReceive(MsgQueue, &led_state, 0);
 80006c8:	4b07      	ldr	r3, [pc, #28]	@ (80006e8 <vTaskLEDControl+0x140>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f107 0108 	add.w	r1, r7, #8
 80006d0:	2200      	movs	r2, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 f854 	bl	8002780 <xQueueReceive>
    while (led_state == 0)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d0ca      	beq.n	8000674 <vTaskLEDControl+0xcc>
  {
 80006de:	e769      	b.n	80005b4 <vTaskLEDControl+0xc>
 80006e0:	40020c00 	.word	0x40020c00
 80006e4:	aaaaaaab 	.word	0xaaaaaaab
 80006e8:	2000002c 	.word	0x2000002c

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b094      	sub	sp, #80	@ 0x50
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0320 	add.w	r3, r7, #32
 80006f6:	2230      	movs	r2, #48	@ 0x30
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f004 f876 	bl	80047ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	4b28      	ldr	r3, [pc, #160]	@ (80007b8 <SystemClock_Config+0xcc>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000718:	4a27      	ldr	r2, [pc, #156]	@ (80007b8 <SystemClock_Config+0xcc>)
 800071a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800071e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000720:	4b25      	ldr	r3, [pc, #148]	@ (80007b8 <SystemClock_Config+0xcc>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	4b22      	ldr	r3, [pc, #136]	@ (80007bc <SystemClock_Config+0xd0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a21      	ldr	r2, [pc, #132]	@ (80007bc <SystemClock_Config+0xd0>)
 8000736:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	4b1f      	ldr	r3, [pc, #124]	@ (80007bc <SystemClock_Config+0xd0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000748:	2302      	movs	r3, #2
 800074a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074c:	2301      	movs	r3, #1
 800074e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000750:	2310      	movs	r3, #16
 8000752:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000754:	2302      	movs	r3, #2
 8000756:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000758:	2300      	movs	r3, #0
 800075a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800075c:	2308      	movs	r3, #8
 800075e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000760:	2332      	movs	r3, #50	@ 0x32
 8000762:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000764:	2304      	movs	r3, #4
 8000766:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000768:	2307      	movs	r3, #7
 800076a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076c:	f107 0320 	add.w	r3, r7, #32
 8000770:	4618      	mov	r0, r3
 8000772:	f000 fd91 	bl	8001298 <HAL_RCC_OscConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800077c:	f000 f98e 	bl	8000a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000780:	230f      	movs	r3, #15
 8000782:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000784:	2302      	movs	r3, #2
 8000786:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800078c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000790:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000792:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000796:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fff2 	bl	8001788 <HAL_RCC_ClockConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007aa:	f000 f977 	bl	8000a9c <Error_Handler>
  }
}
 80007ae:	bf00      	nop
 80007b0:	3750      	adds	r7, #80	@ 0x50
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08c      	sub	sp, #48	@ 0x30
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
 80007da:	4ba1      	ldr	r3, [pc, #644]	@ (8000a60 <MX_GPIO_Init+0x2a0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4aa0      	ldr	r2, [pc, #640]	@ (8000a60 <MX_GPIO_Init+0x2a0>)
 80007e0:	f043 0310 	orr.w	r3, r3, #16
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b9e      	ldr	r3, [pc, #632]	@ (8000a60 <MX_GPIO_Init+0x2a0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0310 	and.w	r3, r3, #16
 80007ee:	61bb      	str	r3, [r7, #24]
 80007f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	4b9a      	ldr	r3, [pc, #616]	@ (8000a60 <MX_GPIO_Init+0x2a0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a99      	ldr	r2, [pc, #612]	@ (8000a60 <MX_GPIO_Init+0x2a0>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b97      	ldr	r3, [pc, #604]	@ (8000a60 <MX_GPIO_Init+0x2a0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b93      	ldr	r3, [pc, #588]	@ (8000a60 <MX_GPIO_Init+0x2a0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a92      	ldr	r2, [pc, #584]	@ (8000a60 <MX_GPIO_Init+0x2a0>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b90      	ldr	r3, [pc, #576]	@ (8000a60 <MX_GPIO_Init+0x2a0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b8c      	ldr	r3, [pc, #560]	@ (8000a60 <MX_GPIO_Init+0x2a0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a8b      	ldr	r2, [pc, #556]	@ (8000a60 <MX_GPIO_Init+0x2a0>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b89      	ldr	r3, [pc, #548]	@ (8000a60 <MX_GPIO_Init+0x2a0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b85      	ldr	r3, [pc, #532]	@ (8000a60 <MX_GPIO_Init+0x2a0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a84      	ldr	r2, [pc, #528]	@ (8000a60 <MX_GPIO_Init+0x2a0>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b82      	ldr	r3, [pc, #520]	@ (8000a60 <MX_GPIO_Init+0x2a0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b7e      	ldr	r3, [pc, #504]	@ (8000a60 <MX_GPIO_Init+0x2a0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a7d      	ldr	r2, [pc, #500]	@ (8000a60 <MX_GPIO_Init+0x2a0>)
 800086c:	f043 0308 	orr.w	r3, r3, #8
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b7b      	ldr	r3, [pc, #492]	@ (8000a60 <MX_GPIO_Init+0x2a0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2108      	movs	r1, #8
 8000882:	4878      	ldr	r0, [pc, #480]	@ (8000a64 <MX_GPIO_Init+0x2a4>)
 8000884:	f000 fcee 	bl	8001264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	2101      	movs	r1, #1
 800088c:	4876      	ldr	r0, [pc, #472]	@ (8000a68 <MX_GPIO_Init+0x2a8>)
 800088e:	f000 fce9 	bl	8001264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|LD6_Pin
 8000892:	2200      	movs	r2, #0
 8000894:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000898:	4874      	ldr	r0, [pc, #464]	@ (8000a6c <MX_GPIO_Init+0x2ac>)
 800089a:	f000 fce3 	bl	8001264 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800089e:	2308      	movs	r3, #8
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	486b      	ldr	r0, [pc, #428]	@ (8000a64 <MX_GPIO_Init+0x2a4>)
 80008b6:	f000 fb21 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008ba:	2301      	movs	r3, #1
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4865      	ldr	r0, [pc, #404]	@ (8000a68 <MX_GPIO_Init+0x2a8>)
 80008d2:	f000 fb13 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008d6:	2308      	movs	r3, #8
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e6:	2305      	movs	r3, #5
 80008e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	485d      	ldr	r0, [pc, #372]	@ (8000a68 <MX_GPIO_Init+0x2a8>)
 80008f2:	f000 fb03 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	4859      	ldr	r0, [pc, #356]	@ (8000a70 <MX_GPIO_Init+0x2b0>)
 800090a:	f000 faf7 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800090e:	2310      	movs	r3, #16
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800091e:	2306      	movs	r3, #6
 8000920:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4851      	ldr	r0, [pc, #324]	@ (8000a70 <MX_GPIO_Init+0x2b0>)
 800092a:	f000 fae7 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800092e:	23e0      	movs	r3, #224	@ 0xe0
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800093e:	2305      	movs	r3, #5
 8000940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4849      	ldr	r0, [pc, #292]	@ (8000a70 <MX_GPIO_Init+0x2b0>)
 800094a:	f000 fad7 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800094e:	2304      	movs	r3, #4
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000952:	2300      	movs	r3, #0
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4844      	ldr	r0, [pc, #272]	@ (8000a74 <MX_GPIO_Init+0x2b4>)
 8000962:	f000 facb 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000966:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000978:	2305      	movs	r3, #5
 800097a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	483c      	ldr	r0, [pc, #240]	@ (8000a74 <MX_GPIO_Init+0x2b4>)
 8000984:	f000 faba 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin ORANGE_LED_Pin RED_LED_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|LD6_Pin
 8000988:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800098c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4832      	ldr	r0, [pc, #200]	@ (8000a6c <MX_GPIO_Init+0x2ac>)
 80009a2:	f000 faab 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009a6:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009b8:	2306      	movs	r3, #6
 80009ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4829      	ldr	r0, [pc, #164]	@ (8000a68 <MX_GPIO_Init+0x2a8>)
 80009c4:	f000 fa9a 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4824      	ldr	r0, [pc, #144]	@ (8000a70 <MX_GPIO_Init+0x2b0>)
 80009de:	f000 fa8d 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009e2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009f4:	230a      	movs	r3, #10
 80009f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	481c      	ldr	r0, [pc, #112]	@ (8000a70 <MX_GPIO_Init+0x2b0>)
 8000a00:	f000 fa7c 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a04:	2320      	movs	r3, #32
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	4815      	ldr	r0, [pc, #84]	@ (8000a6c <MX_GPIO_Init+0x2ac>)
 8000a18:	f000 fa70 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a1c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a22:	2312      	movs	r3, #18
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a2e:	2304      	movs	r3, #4
 8000a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	480e      	ldr	r0, [pc, #56]	@ (8000a74 <MX_GPIO_Init+0x2b4>)
 8000a3a:	f000 fa5f 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a42:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4804      	ldr	r0, [pc, #16]	@ (8000a64 <MX_GPIO_Init+0x2a4>)
 8000a54:	f000 fa52 	bl	8000efc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a58:	bf00      	nop
 8000a5a:	3730      	adds	r7, #48	@ 0x30
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40020800 	.word	0x40020800
 8000a6c:	40020c00 	.word	0x40020c00
 8000a70:	40020000 	.word	0x40020000
 8000a74:	40020400 	.word	0x40020400

08000a78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a04      	ldr	r2, [pc, #16]	@ (8000a98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d101      	bne.n	8000a8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a8a:	f000 f935 	bl	8000cf8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40001400 	.word	0x40001400

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <Error_Handler+0x8>

08000aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b10      	ldr	r3, [pc, #64]	@ (8000af4 <HAL_MspInit+0x4c>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab6:	4a0f      	ldr	r2, [pc, #60]	@ (8000af4 <HAL_MspInit+0x4c>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000abe:	4b0d      	ldr	r3, [pc, #52]	@ (8000af4 <HAL_MspInit+0x4c>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <HAL_MspInit+0x4c>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	4a08      	ldr	r2, [pc, #32]	@ (8000af4 <HAL_MspInit+0x4c>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ada:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <HAL_MspInit+0x4c>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800

08000af8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08e      	sub	sp, #56	@ 0x38
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	4b33      	ldr	r3, [pc, #204]	@ (8000bdc <HAL_InitTick+0xe4>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b10:	4a32      	ldr	r2, [pc, #200]	@ (8000bdc <HAL_InitTick+0xe4>)
 8000b12:	f043 0320 	orr.w	r3, r3, #32
 8000b16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b18:	4b30      	ldr	r3, [pc, #192]	@ (8000bdc <HAL_InitTick+0xe4>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1c:	f003 0320 	and.w	r3, r3, #32
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b24:	f107 0210 	add.w	r2, r7, #16
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f001 f836 	bl	8001ba0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b34:	6a3b      	ldr	r3, [r7, #32]
 8000b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d103      	bne.n	8000b46 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b3e:	f001 f81b 	bl	8001b78 <HAL_RCC_GetPCLK1Freq>
 8000b42:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b44:	e004      	b.n	8000b50 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b46:	f001 f817 	bl	8001b78 <HAL_RCC_GetPCLK1Freq>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b52:	4a23      	ldr	r2, [pc, #140]	@ (8000be0 <HAL_InitTick+0xe8>)
 8000b54:	fba2 2303 	umull	r2, r3, r2, r3
 8000b58:	0c9b      	lsrs	r3, r3, #18
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000b5e:	4b21      	ldr	r3, [pc, #132]	@ (8000be4 <HAL_InitTick+0xec>)
 8000b60:	4a21      	ldr	r2, [pc, #132]	@ (8000be8 <HAL_InitTick+0xf0>)
 8000b62:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000b64:	4b1f      	ldr	r3, [pc, #124]	@ (8000be4 <HAL_InitTick+0xec>)
 8000b66:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b6a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000be4 <HAL_InitTick+0xec>)
 8000b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b70:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000b72:	4b1c      	ldr	r3, [pc, #112]	@ (8000be4 <HAL_InitTick+0xec>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b78:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <HAL_InitTick+0xec>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7e:	4b19      	ldr	r3, [pc, #100]	@ (8000be4 <HAL_InitTick+0xec>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000b84:	4817      	ldr	r0, [pc, #92]	@ (8000be4 <HAL_InitTick+0xec>)
 8000b86:	f001 f83d 	bl	8001c04 <HAL_TIM_Base_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d11b      	bne.n	8000bd0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000b98:	4812      	ldr	r0, [pc, #72]	@ (8000be4 <HAL_InitTick+0xec>)
 8000b9a:	f001 f88d 	bl	8001cb8 <HAL_TIM_Base_Start_IT>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000ba4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d111      	bne.n	8000bd0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000bac:	2037      	movs	r0, #55	@ 0x37
 8000bae:	f000 f997 	bl	8000ee0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b0f      	cmp	r3, #15
 8000bb6:	d808      	bhi.n	8000bca <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	2037      	movs	r0, #55	@ 0x37
 8000bbe:	f000 f973 	bl	8000ea8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bec <HAL_InitTick+0xf4>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	e002      	b.n	8000bd0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bd0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3738      	adds	r7, #56	@ 0x38
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	431bde83 	.word	0x431bde83
 8000be4:	20000030 	.word	0x20000030
 8000be8:	40001400 	.word	0x40001400
 8000bec:	20000004 	.word	0x20000004

08000bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <NMI_Handler+0x4>

08000bf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <MemManage_Handler+0x4>

08000c08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000c2c:	4802      	ldr	r0, [pc, #8]	@ (8000c38 <TIM7_IRQHandler+0x10>)
 8000c2e:	f001 f8b3 	bl	8001d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000030 	.word	0x20000030

08000c3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c40:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <SystemInit+0x20>)
 8000c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c46:	4a05      	ldr	r2, [pc, #20]	@ (8000c5c <SystemInit+0x20>)
 8000c48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c98 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c64:	f7ff ffea 	bl	8000c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c68:	480c      	ldr	r0, [pc, #48]	@ (8000c9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c6a:	490d      	ldr	r1, [pc, #52]	@ (8000ca0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c80:	4c0a      	ldr	r4, [pc, #40]	@ (8000cac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c8e:	f003 fdb5 	bl	80047fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c92:	f7ff fc15 	bl	80004c0 <main>
  bx  lr    
 8000c96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ca4:	080048d8 	.word	0x080048d8
  ldr r2, =_sbss
 8000ca8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000cac:	20012e1c 	.word	0x20012e1c

08000cb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC_IRQHandler>
	...

08000cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <HAL_Init+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf4 <HAL_Init+0x40>)
 8000cbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf4 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf4 <HAL_Init+0x40>)
 8000cca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd0:	4b08      	ldr	r3, [pc, #32]	@ (8000cf4 <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a07      	ldr	r2, [pc, #28]	@ (8000cf4 <HAL_Init+0x40>)
 8000cd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f000 f8d8 	bl	8000e92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f7ff ff08 	bl	8000af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce8:	f7ff fede 	bl	8000aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40023c00 	.word	0x40023c00

08000cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <HAL_IncTick+0x20>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <HAL_IncTick+0x24>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a04      	ldr	r2, [pc, #16]	@ (8000d1c <HAL_IncTick+0x24>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	20000078 	.word	0x20000078

08000d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return uwTick;
 8000d24:	4b03      	ldr	r3, [pc, #12]	@ (8000d34 <HAL_GetTick+0x14>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000078 	.word	0x20000078

08000d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d48:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d54:	4013      	ands	r3, r2
 8000d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6a:	4a04      	ldr	r2, [pc, #16]	@ (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	60d3      	str	r3, [r2, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d84:	4b04      	ldr	r3, [pc, #16]	@ (8000d98 <__NVIC_GetPriorityGrouping+0x18>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	f003 0307 	and.w	r3, r3, #7
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	db0b      	blt.n	8000dc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	f003 021f 	and.w	r2, r3, #31
 8000db4:	4907      	ldr	r1, [pc, #28]	@ (8000dd4 <__NVIC_EnableIRQ+0x38>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	095b      	lsrs	r3, r3, #5
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000e100 	.word	0xe000e100

08000dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	db0a      	blt.n	8000e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	490c      	ldr	r1, [pc, #48]	@ (8000e24 <__NVIC_SetPriority+0x4c>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	0112      	lsls	r2, r2, #4
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e00:	e00a      	b.n	8000e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4908      	ldr	r1, [pc, #32]	@ (8000e28 <__NVIC_SetPriority+0x50>)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f003 030f 	and.w	r3, r3, #15
 8000e0e:	3b04      	subs	r3, #4
 8000e10:	0112      	lsls	r2, r2, #4
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	440b      	add	r3, r1
 8000e16:	761a      	strb	r2, [r3, #24]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000e100 	.word	0xe000e100
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	@ 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f1c3 0307 	rsb	r3, r3, #7
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	bf28      	it	cs
 8000e4a:	2304      	movcs	r3, #4
 8000e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3304      	adds	r3, #4
 8000e52:	2b06      	cmp	r3, #6
 8000e54:	d902      	bls.n	8000e5c <NVIC_EncodePriority+0x30>
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3b03      	subs	r3, #3
 8000e5a:	e000      	b.n	8000e5e <NVIC_EncodePriority+0x32>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	f04f 32ff 	mov.w	r2, #4294967295
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e74:	f04f 31ff 	mov.w	r1, #4294967295
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	43d9      	mvns	r1, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	4313      	orrs	r3, r2
         );
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3724      	adds	r7, #36	@ 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ff4c 	bl	8000d38 <__NVIC_SetPriorityGrouping>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eba:	f7ff ff61 	bl	8000d80 <__NVIC_GetPriorityGrouping>
 8000ebe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	68b9      	ldr	r1, [r7, #8]
 8000ec4:	6978      	ldr	r0, [r7, #20]
 8000ec6:	f7ff ffb1 	bl	8000e2c <NVIC_EncodePriority>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed0:	4611      	mov	r1, r2
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff80 	bl	8000dd8 <__NVIC_SetPriority>
}
 8000ed8:	bf00      	nop
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ff54 	bl	8000d9c <__NVIC_EnableIRQ>
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	@ 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
 8000f16:	e16b      	b.n	80011f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f18:	2201      	movs	r2, #1
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	697a      	ldr	r2, [r7, #20]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	f040 815a 	bne.w	80011ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d005      	beq.n	8000f4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d130      	bne.n	8000fb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	2203      	movs	r2, #3
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	68da      	ldr	r2, [r3, #12]
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f84:	2201      	movs	r2, #1
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	091b      	lsrs	r3, r3, #4
 8000f9a:	f003 0201 	and.w	r2, r3, #1
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	2b03      	cmp	r3, #3
 8000fba:	d017      	beq.n	8000fec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d123      	bne.n	8001040 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	08da      	lsrs	r2, r3, #3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3208      	adds	r2, #8
 8001000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	f003 0307 	and.w	r3, r3, #7
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	220f      	movs	r2, #15
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	691a      	ldr	r2, [r3, #16]
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	08da      	lsrs	r2, r3, #3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3208      	adds	r2, #8
 800103a:	69b9      	ldr	r1, [r7, #24]
 800103c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	2203      	movs	r2, #3
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0203 	and.w	r2, r3, #3
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800107c:	2b00      	cmp	r3, #0
 800107e:	f000 80b4 	beq.w	80011ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b60      	ldr	r3, [pc, #384]	@ (8001208 <HAL_GPIO_Init+0x30c>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108a:	4a5f      	ldr	r2, [pc, #380]	@ (8001208 <HAL_GPIO_Init+0x30c>)
 800108c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001090:	6453      	str	r3, [r2, #68]	@ 0x44
 8001092:	4b5d      	ldr	r3, [pc, #372]	@ (8001208 <HAL_GPIO_Init+0x30c>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001096:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800109e:	4a5b      	ldr	r2, [pc, #364]	@ (800120c <HAL_GPIO_Init+0x310>)
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	089b      	lsrs	r3, r3, #2
 80010a4:	3302      	adds	r3, #2
 80010a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	220f      	movs	r2, #15
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a52      	ldr	r2, [pc, #328]	@ (8001210 <HAL_GPIO_Init+0x314>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d02b      	beq.n	8001122 <HAL_GPIO_Init+0x226>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a51      	ldr	r2, [pc, #324]	@ (8001214 <HAL_GPIO_Init+0x318>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d025      	beq.n	800111e <HAL_GPIO_Init+0x222>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a50      	ldr	r2, [pc, #320]	@ (8001218 <HAL_GPIO_Init+0x31c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d01f      	beq.n	800111a <HAL_GPIO_Init+0x21e>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4f      	ldr	r2, [pc, #316]	@ (800121c <HAL_GPIO_Init+0x320>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d019      	beq.n	8001116 <HAL_GPIO_Init+0x21a>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001220 <HAL_GPIO_Init+0x324>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d013      	beq.n	8001112 <HAL_GPIO_Init+0x216>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4d      	ldr	r2, [pc, #308]	@ (8001224 <HAL_GPIO_Init+0x328>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d00d      	beq.n	800110e <HAL_GPIO_Init+0x212>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001228 <HAL_GPIO_Init+0x32c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d007      	beq.n	800110a <HAL_GPIO_Init+0x20e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4b      	ldr	r2, [pc, #300]	@ (800122c <HAL_GPIO_Init+0x330>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d101      	bne.n	8001106 <HAL_GPIO_Init+0x20a>
 8001102:	2307      	movs	r3, #7
 8001104:	e00e      	b.n	8001124 <HAL_GPIO_Init+0x228>
 8001106:	2308      	movs	r3, #8
 8001108:	e00c      	b.n	8001124 <HAL_GPIO_Init+0x228>
 800110a:	2306      	movs	r3, #6
 800110c:	e00a      	b.n	8001124 <HAL_GPIO_Init+0x228>
 800110e:	2305      	movs	r3, #5
 8001110:	e008      	b.n	8001124 <HAL_GPIO_Init+0x228>
 8001112:	2304      	movs	r3, #4
 8001114:	e006      	b.n	8001124 <HAL_GPIO_Init+0x228>
 8001116:	2303      	movs	r3, #3
 8001118:	e004      	b.n	8001124 <HAL_GPIO_Init+0x228>
 800111a:	2302      	movs	r3, #2
 800111c:	e002      	b.n	8001124 <HAL_GPIO_Init+0x228>
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <HAL_GPIO_Init+0x228>
 8001122:	2300      	movs	r3, #0
 8001124:	69fa      	ldr	r2, [r7, #28]
 8001126:	f002 0203 	and.w	r2, r2, #3
 800112a:	0092      	lsls	r2, r2, #2
 800112c:	4093      	lsls	r3, r2
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001134:	4935      	ldr	r1, [pc, #212]	@ (800120c <HAL_GPIO_Init+0x310>)
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	089b      	lsrs	r3, r3, #2
 800113a:	3302      	adds	r3, #2
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001142:	4b3b      	ldr	r3, [pc, #236]	@ (8001230 <HAL_GPIO_Init+0x334>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001166:	4a32      	ldr	r2, [pc, #200]	@ (8001230 <HAL_GPIO_Init+0x334>)
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800116c:	4b30      	ldr	r3, [pc, #192]	@ (8001230 <HAL_GPIO_Init+0x334>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001190:	4a27      	ldr	r2, [pc, #156]	@ (8001230 <HAL_GPIO_Init+0x334>)
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001196:	4b26      	ldr	r3, [pc, #152]	@ (8001230 <HAL_GPIO_Init+0x334>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001230 <HAL_GPIO_Init+0x334>)
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001230 <HAL_GPIO_Init+0x334>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011e4:	4a12      	ldr	r2, [pc, #72]	@ (8001230 <HAL_GPIO_Init+0x334>)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3301      	adds	r3, #1
 80011ee:	61fb      	str	r3, [r7, #28]
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	2b0f      	cmp	r3, #15
 80011f4:	f67f ae90 	bls.w	8000f18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	3724      	adds	r7, #36	@ 0x24
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800
 800120c:	40013800 	.word	0x40013800
 8001210:	40020000 	.word	0x40020000
 8001214:	40020400 	.word	0x40020400
 8001218:	40020800 	.word	0x40020800
 800121c:	40020c00 	.word	0x40020c00
 8001220:	40021000 	.word	0x40021000
 8001224:	40021400 	.word	0x40021400
 8001228:	40021800 	.word	0x40021800
 800122c:	40021c00 	.word	0x40021c00
 8001230:	40013c00 	.word	0x40013c00

08001234 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691a      	ldr	r2, [r3, #16]
 8001244:	887b      	ldrh	r3, [r7, #2]
 8001246:	4013      	ands	r3, r2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d002      	beq.n	8001252 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800124c:	2301      	movs	r3, #1
 800124e:	73fb      	strb	r3, [r7, #15]
 8001250:	e001      	b.n	8001256 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001256:	7bfb      	ldrb	r3, [r7, #15]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	807b      	strh	r3, [r7, #2]
 8001270:	4613      	mov	r3, r2
 8001272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001274:	787b      	ldrb	r3, [r7, #1]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800127a:	887a      	ldrh	r2, [r7, #2]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001280:	e003      	b.n	800128a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001282:	887b      	ldrh	r3, [r7, #2]
 8001284:	041a      	lsls	r2, r3, #16
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	619a      	str	r2, [r3, #24]
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e267      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d075      	beq.n	80013a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012b6:	4b88      	ldr	r3, [pc, #544]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b04      	cmp	r3, #4
 80012c0:	d00c      	beq.n	80012dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012c2:	4b85      	ldr	r3, [pc, #532]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012ca:	2b08      	cmp	r3, #8
 80012cc:	d112      	bne.n	80012f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ce:	4b82      	ldr	r3, [pc, #520]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012da:	d10b      	bne.n	80012f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012dc:	4b7e      	ldr	r3, [pc, #504]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d05b      	beq.n	80013a0 <HAL_RCC_OscConfig+0x108>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d157      	bne.n	80013a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e242      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012fc:	d106      	bne.n	800130c <HAL_RCC_OscConfig+0x74>
 80012fe:	4b76      	ldr	r3, [pc, #472]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a75      	ldr	r2, [pc, #468]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e01d      	b.n	8001348 <HAL_RCC_OscConfig+0xb0>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001314:	d10c      	bne.n	8001330 <HAL_RCC_OscConfig+0x98>
 8001316:	4b70      	ldr	r3, [pc, #448]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a6f      	ldr	r2, [pc, #444]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 800131c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4b6d      	ldr	r3, [pc, #436]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a6c      	ldr	r2, [pc, #432]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e00b      	b.n	8001348 <HAL_RCC_OscConfig+0xb0>
 8001330:	4b69      	ldr	r3, [pc, #420]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a68      	ldr	r2, [pc, #416]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001336:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b66      	ldr	r3, [pc, #408]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a65      	ldr	r2, [pc, #404]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001342:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d013      	beq.n	8001378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fce6 	bl	8000d20 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001358:	f7ff fce2 	bl	8000d20 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b64      	cmp	r3, #100	@ 0x64
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e207      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136a:	4b5b      	ldr	r3, [pc, #364]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0xc0>
 8001376:	e014      	b.n	80013a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001378:	f7ff fcd2 	bl	8000d20 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff fcce 	bl	8000d20 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	@ 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e1f3      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001392:	4b51      	ldr	r3, [pc, #324]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0xe8>
 800139e:	e000      	b.n	80013a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d063      	beq.n	8001476 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013ae:	4b4a      	ldr	r3, [pc, #296]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00b      	beq.n	80013d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ba:	4b47      	ldr	r3, [pc, #284]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013c2:	2b08      	cmp	r3, #8
 80013c4:	d11c      	bne.n	8001400 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c6:	4b44      	ldr	r3, [pc, #272]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d116      	bne.n	8001400 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d2:	4b41      	ldr	r3, [pc, #260]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <HAL_RCC_OscConfig+0x152>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d001      	beq.n	80013ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e1c7      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ea:	4b3b      	ldr	r3, [pc, #236]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4937      	ldr	r1, [pc, #220]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	e03a      	b.n	8001476 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d020      	beq.n	800144a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001408:	4b34      	ldr	r3, [pc, #208]	@ (80014dc <HAL_RCC_OscConfig+0x244>)
 800140a:	2201      	movs	r2, #1
 800140c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140e:	f7ff fc87 	bl	8000d20 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001416:	f7ff fc83 	bl	8000d20 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e1a8      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001428:	4b2b      	ldr	r3, [pc, #172]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001434:	4b28      	ldr	r3, [pc, #160]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4925      	ldr	r1, [pc, #148]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001444:	4313      	orrs	r3, r2
 8001446:	600b      	str	r3, [r1, #0]
 8001448:	e015      	b.n	8001476 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800144a:	4b24      	ldr	r3, [pc, #144]	@ (80014dc <HAL_RCC_OscConfig+0x244>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001450:	f7ff fc66 	bl	8000d20 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001458:	f7ff fc62 	bl	8000d20 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e187      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146a:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b00      	cmp	r3, #0
 8001480:	d036      	beq.n	80014f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d016      	beq.n	80014b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <HAL_RCC_OscConfig+0x248>)
 800148c:	2201      	movs	r2, #1
 800148e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001490:	f7ff fc46 	bl	8000d20 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001498:	f7ff fc42 	bl	8000d20 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e167      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014aa:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <HAL_RCC_OscConfig+0x240>)
 80014ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0x200>
 80014b6:	e01b      	b.n	80014f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b8:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <HAL_RCC_OscConfig+0x248>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014be:	f7ff fc2f 	bl	8000d20 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c4:	e00e      	b.n	80014e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c6:	f7ff fc2b 	bl	8000d20 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d907      	bls.n	80014e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e150      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
 80014d8:	40023800 	.word	0x40023800
 80014dc:	42470000 	.word	0x42470000
 80014e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e4:	4b88      	ldr	r3, [pc, #544]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 80014e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1ea      	bne.n	80014c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 8097 	beq.w	800162c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001502:	4b81      	ldr	r3, [pc, #516]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10f      	bne.n	800152e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	4b7d      	ldr	r3, [pc, #500]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001516:	4a7c      	ldr	r2, [pc, #496]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800151c:	6413      	str	r3, [r2, #64]	@ 0x40
 800151e:	4b7a      	ldr	r3, [pc, #488]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800152a:	2301      	movs	r3, #1
 800152c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152e:	4b77      	ldr	r3, [pc, #476]	@ (800170c <HAL_RCC_OscConfig+0x474>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001536:	2b00      	cmp	r3, #0
 8001538:	d118      	bne.n	800156c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800153a:	4b74      	ldr	r3, [pc, #464]	@ (800170c <HAL_RCC_OscConfig+0x474>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a73      	ldr	r2, [pc, #460]	@ (800170c <HAL_RCC_OscConfig+0x474>)
 8001540:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001546:	f7ff fbeb 	bl	8000d20 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800154e:	f7ff fbe7 	bl	8000d20 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e10c      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001560:	4b6a      	ldr	r3, [pc, #424]	@ (800170c <HAL_RCC_OscConfig+0x474>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f0      	beq.n	800154e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d106      	bne.n	8001582 <HAL_RCC_OscConfig+0x2ea>
 8001574:	4b64      	ldr	r3, [pc, #400]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 8001576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001578:	4a63      	ldr	r2, [pc, #396]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001580:	e01c      	b.n	80015bc <HAL_RCC_OscConfig+0x324>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2b05      	cmp	r3, #5
 8001588:	d10c      	bne.n	80015a4 <HAL_RCC_OscConfig+0x30c>
 800158a:	4b5f      	ldr	r3, [pc, #380]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 800158c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800158e:	4a5e      	ldr	r2, [pc, #376]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	6713      	str	r3, [r2, #112]	@ 0x70
 8001596:	4b5c      	ldr	r3, [pc, #368]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 8001598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800159a:	4a5b      	ldr	r2, [pc, #364]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80015a2:	e00b      	b.n	80015bc <HAL_RCC_OscConfig+0x324>
 80015a4:	4b58      	ldr	r3, [pc, #352]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 80015a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a8:	4a57      	ldr	r2, [pc, #348]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 80015aa:	f023 0301 	bic.w	r3, r3, #1
 80015ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80015b0:	4b55      	ldr	r3, [pc, #340]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 80015b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b4:	4a54      	ldr	r2, [pc, #336]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 80015b6:	f023 0304 	bic.w	r3, r3, #4
 80015ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d015      	beq.n	80015f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c4:	f7ff fbac 	bl	8000d20 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ca:	e00a      	b.n	80015e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015cc:	f7ff fba8 	bl	8000d20 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015da:	4293      	cmp	r3, r2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e0cb      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e2:	4b49      	ldr	r3, [pc, #292]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 80015e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0ee      	beq.n	80015cc <HAL_RCC_OscConfig+0x334>
 80015ee:	e014      	b.n	800161a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f0:	f7ff fb96 	bl	8000d20 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f6:	e00a      	b.n	800160e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f8:	f7ff fb92 	bl	8000d20 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001606:	4293      	cmp	r3, r2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e0b5      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800160e:	4b3e      	ldr	r3, [pc, #248]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 8001610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1ee      	bne.n	80015f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800161a:	7dfb      	ldrb	r3, [r7, #23]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d105      	bne.n	800162c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001620:	4b39      	ldr	r3, [pc, #228]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 8001622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001624:	4a38      	ldr	r2, [pc, #224]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 8001626:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800162a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 80a1 	beq.w	8001778 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001636:	4b34      	ldr	r3, [pc, #208]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	2b08      	cmp	r3, #8
 8001640:	d05c      	beq.n	80016fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d141      	bne.n	80016ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164a:	4b31      	ldr	r3, [pc, #196]	@ (8001710 <HAL_RCC_OscConfig+0x478>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001650:	f7ff fb66 	bl	8000d20 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001658:	f7ff fb62 	bl	8000d20 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e087      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800166a:	4b27      	ldr	r3, [pc, #156]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69da      	ldr	r2, [r3, #28]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001684:	019b      	lsls	r3, r3, #6
 8001686:	431a      	orrs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800168c:	085b      	lsrs	r3, r3, #1
 800168e:	3b01      	subs	r3, #1
 8001690:	041b      	lsls	r3, r3, #16
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001698:	061b      	lsls	r3, r3, #24
 800169a:	491b      	ldr	r1, [pc, #108]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 800169c:	4313      	orrs	r3, r2
 800169e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001710 <HAL_RCC_OscConfig+0x478>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a6:	f7ff fb3b 	bl	8000d20 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ae:	f7ff fb37 	bl	8000d20 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e05c      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c0:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0f0      	beq.n	80016ae <HAL_RCC_OscConfig+0x416>
 80016cc:	e054      	b.n	8001778 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ce:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <HAL_RCC_OscConfig+0x478>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d4:	f7ff fb24 	bl	8000d20 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016dc:	f7ff fb20 	bl	8000d20 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e045      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ee:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <HAL_RCC_OscConfig+0x470>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0x444>
 80016fa:	e03d      	b.n	8001778 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d107      	bne.n	8001714 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e038      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
 8001708:	40023800 	.word	0x40023800
 800170c:	40007000 	.word	0x40007000
 8001710:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001714:	4b1b      	ldr	r3, [pc, #108]	@ (8001784 <HAL_RCC_OscConfig+0x4ec>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d028      	beq.n	8001774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800172c:	429a      	cmp	r2, r3
 800172e:	d121      	bne.n	8001774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800173a:	429a      	cmp	r2, r3
 800173c:	d11a      	bne.n	8001774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001744:	4013      	ands	r3, r2
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800174a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800174c:	4293      	cmp	r3, r2
 800174e:	d111      	bne.n	8001774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800175a:	085b      	lsrs	r3, r3, #1
 800175c:	3b01      	subs	r3, #1
 800175e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001760:	429a      	cmp	r2, r3
 8001762:	d107      	bne.n	8001774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800176e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001770:	429a      	cmp	r2, r3
 8001772:	d001      	beq.n	8001778 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e000      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800

08001788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e0cc      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800179c:	4b68      	ldr	r3, [pc, #416]	@ (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d90c      	bls.n	80017c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017aa:	4b65      	ldr	r3, [pc, #404]	@ (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b2:	4b63      	ldr	r3, [pc, #396]	@ (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0b8      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d020      	beq.n	8001812 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d005      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017dc:	4b59      	ldr	r3, [pc, #356]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	4a58      	ldr	r2, [pc, #352]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0308 	and.w	r3, r3, #8
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017f4:	4b53      	ldr	r3, [pc, #332]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	4a52      	ldr	r2, [pc, #328]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001800:	4b50      	ldr	r3, [pc, #320]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	494d      	ldr	r1, [pc, #308]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	4313      	orrs	r3, r2
 8001810:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d044      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d107      	bne.n	8001836 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001826:	4b47      	ldr	r3, [pc, #284]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d119      	bne.n	8001866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e07f      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d003      	beq.n	8001846 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001842:	2b03      	cmp	r3, #3
 8001844:	d107      	bne.n	8001856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001846:	4b3f      	ldr	r3, [pc, #252]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d109      	bne.n	8001866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e06f      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001856:	4b3b      	ldr	r3, [pc, #236]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e067      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001866:	4b37      	ldr	r3, [pc, #220]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f023 0203 	bic.w	r2, r3, #3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	4934      	ldr	r1, [pc, #208]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	4313      	orrs	r3, r2
 8001876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001878:	f7ff fa52 	bl	8000d20 <HAL_GetTick>
 800187c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187e:	e00a      	b.n	8001896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001880:	f7ff fa4e 	bl	8000d20 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800188e:	4293      	cmp	r3, r2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e04f      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001896:	4b2b      	ldr	r3, [pc, #172]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 020c 	and.w	r2, r3, #12
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d1eb      	bne.n	8001880 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018a8:	4b25      	ldr	r3, [pc, #148]	@ (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d20c      	bcs.n	80018d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b6:	4b22      	ldr	r3, [pc, #136]	@ (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018be:	4b20      	ldr	r3, [pc, #128]	@ (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e032      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d008      	beq.n	80018ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018dc:	4b19      	ldr	r3, [pc, #100]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	4916      	ldr	r1, [pc, #88]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d009      	beq.n	800190e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018fa:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	490e      	ldr	r1, [pc, #56]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	4313      	orrs	r3, r2
 800190c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800190e:	f000 f821 	bl	8001954 <HAL_RCC_GetSysClockFreq>
 8001912:	4602      	mov	r2, r0
 8001914:	4b0b      	ldr	r3, [pc, #44]	@ (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	091b      	lsrs	r3, r3, #4
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	490a      	ldr	r1, [pc, #40]	@ (8001948 <HAL_RCC_ClockConfig+0x1c0>)
 8001920:	5ccb      	ldrb	r3, [r1, r3]
 8001922:	fa22 f303 	lsr.w	r3, r2, r3
 8001926:	4a09      	ldr	r2, [pc, #36]	@ (800194c <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800192a:	4b09      	ldr	r3, [pc, #36]	@ (8001950 <HAL_RCC_ClockConfig+0x1c8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff f8e2 	bl	8000af8 <HAL_InitTick>

  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023c00 	.word	0x40023c00
 8001944:	40023800 	.word	0x40023800
 8001948:	080048b0 	.word	0x080048b0
 800194c:	20000000 	.word	0x20000000
 8001950:	20000004 	.word	0x20000004

08001954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001958:	b094      	sub	sp, #80	@ 0x50
 800195a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800196c:	4b79      	ldr	r3, [pc, #484]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x200>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 030c 	and.w	r3, r3, #12
 8001974:	2b08      	cmp	r3, #8
 8001976:	d00d      	beq.n	8001994 <HAL_RCC_GetSysClockFreq+0x40>
 8001978:	2b08      	cmp	r3, #8
 800197a:	f200 80e1 	bhi.w	8001b40 <HAL_RCC_GetSysClockFreq+0x1ec>
 800197e:	2b00      	cmp	r3, #0
 8001980:	d002      	beq.n	8001988 <HAL_RCC_GetSysClockFreq+0x34>
 8001982:	2b04      	cmp	r3, #4
 8001984:	d003      	beq.n	800198e <HAL_RCC_GetSysClockFreq+0x3a>
 8001986:	e0db      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001988:	4b73      	ldr	r3, [pc, #460]	@ (8001b58 <HAL_RCC_GetSysClockFreq+0x204>)
 800198a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800198c:	e0db      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800198e:	4b73      	ldr	r3, [pc, #460]	@ (8001b5c <HAL_RCC_GetSysClockFreq+0x208>)
 8001990:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001992:	e0d8      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001994:	4b6f      	ldr	r3, [pc, #444]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800199c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800199e:	4b6d      	ldr	r3, [pc, #436]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x200>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d063      	beq.n	8001a72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	099b      	lsrs	r3, r3, #6
 80019b0:	2200      	movs	r2, #0
 80019b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80019be:	2300      	movs	r3, #0
 80019c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80019c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019c6:	4622      	mov	r2, r4
 80019c8:	462b      	mov	r3, r5
 80019ca:	f04f 0000 	mov.w	r0, #0
 80019ce:	f04f 0100 	mov.w	r1, #0
 80019d2:	0159      	lsls	r1, r3, #5
 80019d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019d8:	0150      	lsls	r0, r2, #5
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4621      	mov	r1, r4
 80019e0:	1a51      	subs	r1, r2, r1
 80019e2:	6139      	str	r1, [r7, #16]
 80019e4:	4629      	mov	r1, r5
 80019e6:	eb63 0301 	sbc.w	r3, r3, r1
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	f04f 0300 	mov.w	r3, #0
 80019f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019f8:	4659      	mov	r1, fp
 80019fa:	018b      	lsls	r3, r1, #6
 80019fc:	4651      	mov	r1, sl
 80019fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a02:	4651      	mov	r1, sl
 8001a04:	018a      	lsls	r2, r1, #6
 8001a06:	4651      	mov	r1, sl
 8001a08:	ebb2 0801 	subs.w	r8, r2, r1
 8001a0c:	4659      	mov	r1, fp
 8001a0e:	eb63 0901 	sbc.w	r9, r3, r1
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a26:	4690      	mov	r8, r2
 8001a28:	4699      	mov	r9, r3
 8001a2a:	4623      	mov	r3, r4
 8001a2c:	eb18 0303 	adds.w	r3, r8, r3
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	462b      	mov	r3, r5
 8001a34:	eb49 0303 	adc.w	r3, r9, r3
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a46:	4629      	mov	r1, r5
 8001a48:	024b      	lsls	r3, r1, #9
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a50:	4621      	mov	r1, r4
 8001a52:	024a      	lsls	r2, r1, #9
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a64:	f7fe fbb4 	bl	80001d0 <__aeabi_uldivmod>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a70:	e058      	b.n	8001b24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a72:	4b38      	ldr	r3, [pc, #224]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	099b      	lsrs	r3, r3, #6
 8001a78:	2200      	movs	r2, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	4611      	mov	r1, r2
 8001a7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a82:	623b      	str	r3, [r7, #32]
 8001a84:	2300      	movs	r3, #0
 8001a86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a8c:	4642      	mov	r2, r8
 8001a8e:	464b      	mov	r3, r9
 8001a90:	f04f 0000 	mov.w	r0, #0
 8001a94:	f04f 0100 	mov.w	r1, #0
 8001a98:	0159      	lsls	r1, r3, #5
 8001a9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a9e:	0150      	lsls	r0, r2, #5
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4641      	mov	r1, r8
 8001aa6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001aaa:	4649      	mov	r1, r9
 8001aac:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	f04f 0300 	mov.w	r3, #0
 8001ab8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001abc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ac0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ac4:	ebb2 040a 	subs.w	r4, r2, sl
 8001ac8:	eb63 050b 	sbc.w	r5, r3, fp
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	f04f 0300 	mov.w	r3, #0
 8001ad4:	00eb      	lsls	r3, r5, #3
 8001ad6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ada:	00e2      	lsls	r2, r4, #3
 8001adc:	4614      	mov	r4, r2
 8001ade:	461d      	mov	r5, r3
 8001ae0:	4643      	mov	r3, r8
 8001ae2:	18e3      	adds	r3, r4, r3
 8001ae4:	603b      	str	r3, [r7, #0]
 8001ae6:	464b      	mov	r3, r9
 8001ae8:	eb45 0303 	adc.w	r3, r5, r3
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001afa:	4629      	mov	r1, r5
 8001afc:	028b      	lsls	r3, r1, #10
 8001afe:	4621      	mov	r1, r4
 8001b00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b04:	4621      	mov	r1, r4
 8001b06:	028a      	lsls	r2, r1, #10
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b0e:	2200      	movs	r2, #0
 8001b10:	61bb      	str	r3, [r7, #24]
 8001b12:	61fa      	str	r2, [r7, #28]
 8001b14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b18:	f7fe fb5a 	bl	80001d0 <__aeabi_uldivmod>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4613      	mov	r3, r2
 8001b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b24:	4b0b      	ldr	r3, [pc, #44]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	0c1b      	lsrs	r3, r3, #16
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	3301      	adds	r3, #1
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001b34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b3e:	e002      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b40:	4b05      	ldr	r3, [pc, #20]	@ (8001b58 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3750      	adds	r7, #80	@ 0x50
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800
 8001b58:	00f42400 	.word	0x00f42400
 8001b5c:	007a1200 	.word	0x007a1200

08001b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b64:	4b03      	ldr	r3, [pc, #12]	@ (8001b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b66:	681b      	ldr	r3, [r3, #0]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20000000 	.word	0x20000000

08001b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b7c:	f7ff fff0 	bl	8001b60 <HAL_RCC_GetHCLKFreq>
 8001b80:	4602      	mov	r2, r0
 8001b82:	4b05      	ldr	r3, [pc, #20]	@ (8001b98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	0a9b      	lsrs	r3, r3, #10
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	4903      	ldr	r1, [pc, #12]	@ (8001b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b8e:	5ccb      	ldrb	r3, [r1, r3]
 8001b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	080048c0 	.word	0x080048c0

08001ba0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	220f      	movs	r2, #15
 8001bae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bb0:	4b12      	ldr	r3, [pc, #72]	@ (8001bfc <HAL_RCC_GetClockConfig+0x5c>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 0203 	and.w	r2, r3, #3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001bfc <HAL_RCC_GetClockConfig+0x5c>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bfc <HAL_RCC_GetClockConfig+0x5c>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bd4:	4b09      	ldr	r3, [pc, #36]	@ (8001bfc <HAL_RCC_GetClockConfig+0x5c>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	08db      	lsrs	r3, r3, #3
 8001bda:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001be2:	4b07      	ldr	r3, [pc, #28]	@ (8001c00 <HAL_RCC_GetClockConfig+0x60>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0207 	and.w	r2, r3, #7
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	601a      	str	r2, [r3, #0]
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40023c00 	.word	0x40023c00

08001c04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e041      	b.n	8001c9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d106      	bne.n	8001c30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f839 	bl	8001ca2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2202      	movs	r2, #2
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3304      	adds	r3, #4
 8001c40:	4619      	mov	r1, r3
 8001c42:	4610      	mov	r0, r2
 8001c44:	f000 f9c0 	bl	8001fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d001      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e04e      	b.n	8001d6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0201 	orr.w	r2, r2, #1
 8001ce6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a23      	ldr	r2, [pc, #140]	@ (8001d7c <HAL_TIM_Base_Start_IT+0xc4>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d022      	beq.n	8001d38 <HAL_TIM_Base_Start_IT+0x80>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cfa:	d01d      	beq.n	8001d38 <HAL_TIM_Base_Start_IT+0x80>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a1f      	ldr	r2, [pc, #124]	@ (8001d80 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d018      	beq.n	8001d38 <HAL_TIM_Base_Start_IT+0x80>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8001d84 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d013      	beq.n	8001d38 <HAL_TIM_Base_Start_IT+0x80>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a1c      	ldr	r2, [pc, #112]	@ (8001d88 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00e      	beq.n	8001d38 <HAL_TIM_Base_Start_IT+0x80>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8001d8c <HAL_TIM_Base_Start_IT+0xd4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d009      	beq.n	8001d38 <HAL_TIM_Base_Start_IT+0x80>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a19      	ldr	r2, [pc, #100]	@ (8001d90 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d004      	beq.n	8001d38 <HAL_TIM_Base_Start_IT+0x80>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a18      	ldr	r2, [pc, #96]	@ (8001d94 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d111      	bne.n	8001d5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2b06      	cmp	r3, #6
 8001d48:	d010      	beq.n	8001d6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f042 0201 	orr.w	r2, r2, #1
 8001d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d5a:	e007      	b.n	8001d6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0201 	orr.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40010000 	.word	0x40010000
 8001d80:	40000400 	.word	0x40000400
 8001d84:	40000800 	.word	0x40000800
 8001d88:	40000c00 	.word	0x40000c00
 8001d8c:	40010400 	.word	0x40010400
 8001d90:	40014000 	.word	0x40014000
 8001d94:	40001800 	.word	0x40001800

08001d98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d020      	beq.n	8001dfc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d01b      	beq.n	8001dfc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0202 	mvn.w	r2, #2
 8001dcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f8d2 	bl	8001f8c <HAL_TIM_IC_CaptureCallback>
 8001de8:	e005      	b.n	8001df6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f8c4 	bl	8001f78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f8d5 	bl	8001fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	f003 0304 	and.w	r3, r3, #4
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d020      	beq.n	8001e48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d01b      	beq.n	8001e48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 0204 	mvn.w	r2, #4
 8001e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f8ac 	bl	8001f8c <HAL_TIM_IC_CaptureCallback>
 8001e34:	e005      	b.n	8001e42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f89e 	bl	8001f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f8af 	bl	8001fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d020      	beq.n	8001e94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d01b      	beq.n	8001e94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f06f 0208 	mvn.w	r2, #8
 8001e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2204      	movs	r2, #4
 8001e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f886 	bl	8001f8c <HAL_TIM_IC_CaptureCallback>
 8001e80:	e005      	b.n	8001e8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f878 	bl	8001f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f889 	bl	8001fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d020      	beq.n	8001ee0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f003 0310 	and.w	r3, r3, #16
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d01b      	beq.n	8001ee0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f06f 0210 	mvn.w	r2, #16
 8001eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2208      	movs	r2, #8
 8001eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f860 	bl	8001f8c <HAL_TIM_IC_CaptureCallback>
 8001ecc:	e005      	b.n	8001eda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f852 	bl	8001f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f863 	bl	8001fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00c      	beq.n	8001f04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d007      	beq.n	8001f04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 0201 	mvn.w	r2, #1
 8001efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7fe fdba 	bl	8000a78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00c      	beq.n	8001f28 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d007      	beq.n	8001f28 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f906 	bl	8002134 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00c      	beq.n	8001f4c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d007      	beq.n	8001f4c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f834 	bl	8001fb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	f003 0320 	and.w	r3, r3, #32
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00c      	beq.n	8001f70 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f003 0320 	and.w	r3, r3, #32
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d007      	beq.n	8001f70 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f06f 0220 	mvn.w	r2, #32
 8001f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8d8 	bl	8002120 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f70:	bf00      	nop
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a46      	ldr	r2, [pc, #280]	@ (80020f4 <TIM_Base_SetConfig+0x12c>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d013      	beq.n	8002008 <TIM_Base_SetConfig+0x40>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fe6:	d00f      	beq.n	8002008 <TIM_Base_SetConfig+0x40>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a43      	ldr	r2, [pc, #268]	@ (80020f8 <TIM_Base_SetConfig+0x130>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d00b      	beq.n	8002008 <TIM_Base_SetConfig+0x40>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a42      	ldr	r2, [pc, #264]	@ (80020fc <TIM_Base_SetConfig+0x134>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d007      	beq.n	8002008 <TIM_Base_SetConfig+0x40>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a41      	ldr	r2, [pc, #260]	@ (8002100 <TIM_Base_SetConfig+0x138>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d003      	beq.n	8002008 <TIM_Base_SetConfig+0x40>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a40      	ldr	r2, [pc, #256]	@ (8002104 <TIM_Base_SetConfig+0x13c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d108      	bne.n	800201a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800200e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a35      	ldr	r2, [pc, #212]	@ (80020f4 <TIM_Base_SetConfig+0x12c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d02b      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002028:	d027      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a32      	ldr	r2, [pc, #200]	@ (80020f8 <TIM_Base_SetConfig+0x130>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d023      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a31      	ldr	r2, [pc, #196]	@ (80020fc <TIM_Base_SetConfig+0x134>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d01f      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a30      	ldr	r2, [pc, #192]	@ (8002100 <TIM_Base_SetConfig+0x138>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d01b      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a2f      	ldr	r2, [pc, #188]	@ (8002104 <TIM_Base_SetConfig+0x13c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d017      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a2e      	ldr	r2, [pc, #184]	@ (8002108 <TIM_Base_SetConfig+0x140>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d013      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a2d      	ldr	r2, [pc, #180]	@ (800210c <TIM_Base_SetConfig+0x144>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00f      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a2c      	ldr	r2, [pc, #176]	@ (8002110 <TIM_Base_SetConfig+0x148>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00b      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a2b      	ldr	r2, [pc, #172]	@ (8002114 <TIM_Base_SetConfig+0x14c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d007      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a2a      	ldr	r2, [pc, #168]	@ (8002118 <TIM_Base_SetConfig+0x150>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d003      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a29      	ldr	r2, [pc, #164]	@ (800211c <TIM_Base_SetConfig+0x154>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d108      	bne.n	800208c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	4313      	orrs	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	4313      	orrs	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a10      	ldr	r2, [pc, #64]	@ (80020f4 <TIM_Base_SetConfig+0x12c>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d003      	beq.n	80020c0 <TIM_Base_SetConfig+0xf8>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a12      	ldr	r2, [pc, #72]	@ (8002104 <TIM_Base_SetConfig+0x13c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d103      	bne.n	80020c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	691a      	ldr	r2, [r3, #16]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d105      	bne.n	80020e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	f023 0201 	bic.w	r2, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	611a      	str	r2, [r3, #16]
  }
}
 80020e6:	bf00      	nop
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40010000 	.word	0x40010000
 80020f8:	40000400 	.word	0x40000400
 80020fc:	40000800 	.word	0x40000800
 8002100:	40000c00 	.word	0x40000c00
 8002104:	40010400 	.word	0x40010400
 8002108:	40014000 	.word	0x40014000
 800210c:	40014400 	.word	0x40014400
 8002110:	40014800 	.word	0x40014800
 8002114:	40001800 	.word	0x40001800
 8002118:	40001c00 	.word	0x40001c00
 800211c:	40002000 	.word	0x40002000

08002120 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f103 0208 	add.w	r2, r3, #8
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f04f 32ff 	mov.w	r2, #4294967295
 8002160:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f103 0208 	add.w	r2, r3, #8
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f103 0208 	add.w	r2, r3, #8
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021a2:	b480      	push	{r7}
 80021a4:	b085      	sub	sp, #20
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	601a      	str	r2, [r3, #0]
}
 80021de:	bf00      	nop
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021ea:	b480      	push	{r7}
 80021ec:	b085      	sub	sp, #20
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002200:	d103      	bne.n	800220a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	e00c      	b.n	8002224 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3308      	adds	r3, #8
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	e002      	b.n	8002218 <vListInsert+0x2e>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	429a      	cmp	r2, r3
 8002222:	d2f6      	bcs.n	8002212 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	601a      	str	r2, [r3, #0]
}
 8002250:	bf00      	nop
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6892      	ldr	r2, [r2, #8]
 8002272:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6852      	ldr	r2, [r2, #4]
 800227c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	429a      	cmp	r2, r3
 8002286:	d103      	bne.n	8002290 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	1e5a      	subs	r2, r3, #1
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10b      	bne.n	80022dc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80022c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022c8:	f383 8811 	msr	BASEPRI, r3
 80022cc:	f3bf 8f6f 	isb	sy
 80022d0:	f3bf 8f4f 	dsb	sy
 80022d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80022d6:	bf00      	nop
 80022d8:	bf00      	nop
 80022da:	e7fd      	b.n	80022d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80022dc:	f001 ff84 	bl	80041e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e8:	68f9      	ldr	r1, [r7, #12]
 80022ea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80022ec:	fb01 f303 	mul.w	r3, r1, r3
 80022f0:	441a      	add	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800230c:	3b01      	subs	r3, #1
 800230e:	68f9      	ldr	r1, [r7, #12]
 8002310:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002312:	fb01 f303 	mul.w	r3, r1, r3
 8002316:	441a      	add	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	22ff      	movs	r2, #255	@ 0xff
 8002320:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	22ff      	movs	r2, #255	@ 0xff
 8002328:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d114      	bne.n	800235c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d01a      	beq.n	8002370 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	3310      	adds	r3, #16
 800233e:	4618      	mov	r0, r3
 8002340:	f001 f856 	bl	80033f0 <xTaskRemoveFromEventList>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d012      	beq.n	8002370 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800234a:	4b0d      	ldr	r3, [pc, #52]	@ (8002380 <xQueueGenericReset+0xd0>)
 800234c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	f3bf 8f4f 	dsb	sy
 8002356:	f3bf 8f6f 	isb	sy
 800235a:	e009      	b.n	8002370 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	3310      	adds	r3, #16
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fef1 	bl	8002148 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	3324      	adds	r3, #36	@ 0x24
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff feec 	bl	8002148 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002370:	f001 ff6c 	bl	800424c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002374:	2301      	movs	r3, #1
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	e000ed04 	.word	0xe000ed04

08002384 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08a      	sub	sp, #40	@ 0x28
 8002388:	af02      	add	r7, sp, #8
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	4613      	mov	r3, r2
 8002390:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10b      	bne.n	80023b0 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800239c:	f383 8811 	msr	BASEPRI, r3
 80023a0:	f3bf 8f6f 	isb	sy
 80023a4:	f3bf 8f4f 	dsb	sy
 80023a8:	613b      	str	r3, [r7, #16]
}
 80023aa:	bf00      	nop
 80023ac:	bf00      	nop
 80023ae:	e7fd      	b.n	80023ac <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d102      	bne.n	80023bc <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
 80023ba:	e004      	b.n	80023c6 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	fb02 f303 	mul.w	r3, r2, r3
 80023c4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3350      	adds	r3, #80	@ 0x50
 80023ca:	4618      	mov	r0, r3
 80023cc:	f002 f82e 	bl	800442c <pvPortMalloc>
 80023d0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00d      	beq.n	80023f4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	3350      	adds	r3, #80	@ 0x50
 80023e0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023e2:	79fa      	ldrb	r2, [r7, #7]
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	4613      	mov	r3, r2
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 f805 	bl	80023fe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80023f4:	69bb      	ldr	r3, [r7, #24]
	}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3720      	adds	r7, #32
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b084      	sub	sp, #16
 8002402:	af00      	add	r7, sp, #0
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
 800240a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d103      	bne.n	800241a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	e002      	b.n	8002420 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800242c:	2101      	movs	r1, #1
 800242e:	69b8      	ldr	r0, [r7, #24]
 8002430:	f7ff ff3e 	bl	80022b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	78fa      	ldrb	r2, [r7, #3]
 8002438:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800243c:	bf00      	nop
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08e      	sub	sp, #56	@ 0x38
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
 8002450:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002452:	2300      	movs	r3, #0
 8002454:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800245a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10b      	bne.n	8002478 <xQueueGenericSend+0x34>
	__asm volatile
 8002460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002464:	f383 8811 	msr	BASEPRI, r3
 8002468:	f3bf 8f6f 	isb	sy
 800246c:	f3bf 8f4f 	dsb	sy
 8002470:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002472:	bf00      	nop
 8002474:	bf00      	nop
 8002476:	e7fd      	b.n	8002474 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d103      	bne.n	8002486 <xQueueGenericSend+0x42>
 800247e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <xQueueGenericSend+0x46>
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <xQueueGenericSend+0x48>
 800248a:	2300      	movs	r3, #0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10b      	bne.n	80024a8 <xQueueGenericSend+0x64>
	__asm volatile
 8002490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002494:	f383 8811 	msr	BASEPRI, r3
 8002498:	f3bf 8f6f 	isb	sy
 800249c:	f3bf 8f4f 	dsb	sy
 80024a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80024a2:	bf00      	nop
 80024a4:	bf00      	nop
 80024a6:	e7fd      	b.n	80024a4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d103      	bne.n	80024b6 <xQueueGenericSend+0x72>
 80024ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <xQueueGenericSend+0x76>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <xQueueGenericSend+0x78>
 80024ba:	2300      	movs	r3, #0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10b      	bne.n	80024d8 <xQueueGenericSend+0x94>
	__asm volatile
 80024c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024c4:	f383 8811 	msr	BASEPRI, r3
 80024c8:	f3bf 8f6f 	isb	sy
 80024cc:	f3bf 8f4f 	dsb	sy
 80024d0:	623b      	str	r3, [r7, #32]
}
 80024d2:	bf00      	nop
 80024d4:	bf00      	nop
 80024d6:	e7fd      	b.n	80024d4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024d8:	f001 f92a 	bl	8003730 <xTaskGetSchedulerState>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d102      	bne.n	80024e8 <xQueueGenericSend+0xa4>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <xQueueGenericSend+0xa8>
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <xQueueGenericSend+0xaa>
 80024ec:	2300      	movs	r3, #0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10b      	bne.n	800250a <xQueueGenericSend+0xc6>
	__asm volatile
 80024f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024f6:	f383 8811 	msr	BASEPRI, r3
 80024fa:	f3bf 8f6f 	isb	sy
 80024fe:	f3bf 8f4f 	dsb	sy
 8002502:	61fb      	str	r3, [r7, #28]
}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	e7fd      	b.n	8002506 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800250a:	f001 fe6d 	bl	80041e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800250e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002510:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002516:	429a      	cmp	r2, r3
 8002518:	d302      	bcc.n	8002520 <xQueueGenericSend+0xdc>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d129      	bne.n	8002574 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	68b9      	ldr	r1, [r7, #8]
 8002524:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002526:	f000 fa0d 	bl	8002944 <prvCopyDataToQueue>
 800252a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800252c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002530:	2b00      	cmp	r3, #0
 8002532:	d010      	beq.n	8002556 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002536:	3324      	adds	r3, #36	@ 0x24
 8002538:	4618      	mov	r0, r3
 800253a:	f000 ff59 	bl	80033f0 <xTaskRemoveFromEventList>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d013      	beq.n	800256c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002544:	4b3f      	ldr	r3, [pc, #252]	@ (8002644 <xQueueGenericSend+0x200>)
 8002546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	f3bf 8f4f 	dsb	sy
 8002550:	f3bf 8f6f 	isb	sy
 8002554:	e00a      	b.n	800256c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800255c:	4b39      	ldr	r3, [pc, #228]	@ (8002644 <xQueueGenericSend+0x200>)
 800255e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800256c:	f001 fe6e 	bl	800424c <vPortExitCritical>
				return pdPASS;
 8002570:	2301      	movs	r3, #1
 8002572:	e063      	b.n	800263c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d103      	bne.n	8002582 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800257a:	f001 fe67 	bl	800424c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800257e:	2300      	movs	r3, #0
 8002580:	e05c      	b.n	800263c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002584:	2b00      	cmp	r3, #0
 8002586:	d106      	bne.n	8002596 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	4618      	mov	r0, r3
 800258e:	f000 ff93 	bl	80034b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002592:	2301      	movs	r3, #1
 8002594:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002596:	f001 fe59 	bl	800424c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800259a:	f000 fd05 	bl	8002fa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800259e:	f001 fe23 	bl	80041e8 <vPortEnterCritical>
 80025a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80025a8:	b25b      	sxtb	r3, r3
 80025aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ae:	d103      	bne.n	80025b8 <xQueueGenericSend+0x174>
 80025b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80025be:	b25b      	sxtb	r3, r3
 80025c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c4:	d103      	bne.n	80025ce <xQueueGenericSend+0x18a>
 80025c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80025ce:	f001 fe3d 	bl	800424c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025d2:	1d3a      	adds	r2, r7, #4
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	4611      	mov	r1, r2
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 ff82 	bl	80034e4 <xTaskCheckForTimeOut>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d124      	bne.n	8002630 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80025e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025e8:	f000 faa4 	bl	8002b34 <prvIsQueueFull>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d018      	beq.n	8002624 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80025f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f4:	3310      	adds	r3, #16
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	4611      	mov	r1, r2
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 fea6 	bl	800334c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002600:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002602:	f000 fa2f 	bl	8002a64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002606:	f000 fcdd 	bl	8002fc4 <xTaskResumeAll>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	f47f af7c 	bne.w	800250a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002612:	4b0c      	ldr	r3, [pc, #48]	@ (8002644 <xQueueGenericSend+0x200>)
 8002614:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	f3bf 8f4f 	dsb	sy
 800261e:	f3bf 8f6f 	isb	sy
 8002622:	e772      	b.n	800250a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002624:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002626:	f000 fa1d 	bl	8002a64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800262a:	f000 fccb 	bl	8002fc4 <xTaskResumeAll>
 800262e:	e76c      	b.n	800250a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002630:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002632:	f000 fa17 	bl	8002a64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002636:	f000 fcc5 	bl	8002fc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800263a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800263c:	4618      	mov	r0, r3
 800263e:	3738      	adds	r7, #56	@ 0x38
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	e000ed04 	.word	0xe000ed04

08002648 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08e      	sub	sp, #56	@ 0x38
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800265a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10b      	bne.n	8002678 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002664:	f383 8811 	msr	BASEPRI, r3
 8002668:	f3bf 8f6f 	isb	sy
 800266c:	f3bf 8f4f 	dsb	sy
 8002670:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002672:	bf00      	nop
 8002674:	bf00      	nop
 8002676:	e7fd      	b.n	8002674 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d103      	bne.n	8002686 <xQueueGenericSendFromISR+0x3e>
 800267e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <xQueueGenericSendFromISR+0x42>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <xQueueGenericSendFromISR+0x44>
 800268a:	2300      	movs	r3, #0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10b      	bne.n	80026a8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002694:	f383 8811 	msr	BASEPRI, r3
 8002698:	f3bf 8f6f 	isb	sy
 800269c:	f3bf 8f4f 	dsb	sy
 80026a0:	623b      	str	r3, [r7, #32]
}
 80026a2:	bf00      	nop
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d103      	bne.n	80026b6 <xQueueGenericSendFromISR+0x6e>
 80026ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <xQueueGenericSendFromISR+0x72>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <xQueueGenericSendFromISR+0x74>
 80026ba:	2300      	movs	r3, #0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10b      	bne.n	80026d8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80026c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026c4:	f383 8811 	msr	BASEPRI, r3
 80026c8:	f3bf 8f6f 	isb	sy
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	61fb      	str	r3, [r7, #28]
}
 80026d2:	bf00      	nop
 80026d4:	bf00      	nop
 80026d6:	e7fd      	b.n	80026d4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026d8:	f001 fe66 	bl	80043a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80026dc:	f3ef 8211 	mrs	r2, BASEPRI
 80026e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026e4:	f383 8811 	msr	BASEPRI, r3
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	61ba      	str	r2, [r7, #24]
 80026f2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80026f4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80026f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002700:	429a      	cmp	r2, r3
 8002702:	d302      	bcc.n	800270a <xQueueGenericSendFromISR+0xc2>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d12c      	bne.n	8002764 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800270a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800270c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002710:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	68b9      	ldr	r1, [r7, #8]
 8002718:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800271a:	f000 f913 	bl	8002944 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800271e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8002722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002726:	d112      	bne.n	800274e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800272a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272c:	2b00      	cmp	r3, #0
 800272e:	d016      	beq.n	800275e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002732:	3324      	adds	r3, #36	@ 0x24
 8002734:	4618      	mov	r0, r3
 8002736:	f000 fe5b 	bl	80033f0 <xTaskRemoveFromEventList>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00e      	beq.n	800275e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00b      	beq.n	800275e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	e007      	b.n	800275e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800274e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002752:	3301      	adds	r3, #1
 8002754:	b2db      	uxtb	r3, r3
 8002756:	b25a      	sxtb	r2, r3
 8002758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800275a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800275e:	2301      	movs	r3, #1
 8002760:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8002762:	e001      	b.n	8002768 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002764:	2300      	movs	r3, #0
 8002766:	637b      	str	r3, [r7, #52]	@ 0x34
 8002768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800276a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002772:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002776:	4618      	mov	r0, r3
 8002778:	3738      	adds	r7, #56	@ 0x38
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08c      	sub	sp, #48	@ 0x30
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800278c:	2300      	movs	r3, #0
 800278e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10b      	bne.n	80027b2 <xQueueReceive+0x32>
	__asm volatile
 800279a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800279e:	f383 8811 	msr	BASEPRI, r3
 80027a2:	f3bf 8f6f 	isb	sy
 80027a6:	f3bf 8f4f 	dsb	sy
 80027aa:	623b      	str	r3, [r7, #32]
}
 80027ac:	bf00      	nop
 80027ae:	bf00      	nop
 80027b0:	e7fd      	b.n	80027ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d103      	bne.n	80027c0 <xQueueReceive+0x40>
 80027b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <xQueueReceive+0x44>
 80027c0:	2301      	movs	r3, #1
 80027c2:	e000      	b.n	80027c6 <xQueueReceive+0x46>
 80027c4:	2300      	movs	r3, #0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10b      	bne.n	80027e2 <xQueueReceive+0x62>
	__asm volatile
 80027ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027ce:	f383 8811 	msr	BASEPRI, r3
 80027d2:	f3bf 8f6f 	isb	sy
 80027d6:	f3bf 8f4f 	dsb	sy
 80027da:	61fb      	str	r3, [r7, #28]
}
 80027dc:	bf00      	nop
 80027de:	bf00      	nop
 80027e0:	e7fd      	b.n	80027de <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027e2:	f000 ffa5 	bl	8003730 <xTaskGetSchedulerState>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d102      	bne.n	80027f2 <xQueueReceive+0x72>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <xQueueReceive+0x76>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <xQueueReceive+0x78>
 80027f6:	2300      	movs	r3, #0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10b      	bne.n	8002814 <xQueueReceive+0x94>
	__asm volatile
 80027fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002800:	f383 8811 	msr	BASEPRI, r3
 8002804:	f3bf 8f6f 	isb	sy
 8002808:	f3bf 8f4f 	dsb	sy
 800280c:	61bb      	str	r3, [r7, #24]
}
 800280e:	bf00      	nop
 8002810:	bf00      	nop
 8002812:	e7fd      	b.n	8002810 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002814:	f001 fce8 	bl	80041e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800281a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800281c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800281e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002820:	2b00      	cmp	r3, #0
 8002822:	d01f      	beq.n	8002864 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002824:	68b9      	ldr	r1, [r7, #8]
 8002826:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002828:	f000 f8f6 	bl	8002a18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800282c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282e:	1e5a      	subs	r2, r3, #1
 8002830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002832:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00f      	beq.n	800285c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800283c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800283e:	3310      	adds	r3, #16
 8002840:	4618      	mov	r0, r3
 8002842:	f000 fdd5 	bl	80033f0 <xTaskRemoveFromEventList>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d007      	beq.n	800285c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800284c:	4b3c      	ldr	r3, [pc, #240]	@ (8002940 <xQueueReceive+0x1c0>)
 800284e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	f3bf 8f4f 	dsb	sy
 8002858:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800285c:	f001 fcf6 	bl	800424c <vPortExitCritical>
				return pdPASS;
 8002860:	2301      	movs	r3, #1
 8002862:	e069      	b.n	8002938 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d103      	bne.n	8002872 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800286a:	f001 fcef 	bl	800424c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800286e:	2300      	movs	r3, #0
 8002870:	e062      	b.n	8002938 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002874:	2b00      	cmp	r3, #0
 8002876:	d106      	bne.n	8002886 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002878:	f107 0310 	add.w	r3, r7, #16
 800287c:	4618      	mov	r0, r3
 800287e:	f000 fe1b 	bl	80034b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002882:	2301      	movs	r3, #1
 8002884:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002886:	f001 fce1 	bl	800424c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800288a:	f000 fb8d 	bl	8002fa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800288e:	f001 fcab 	bl	80041e8 <vPortEnterCritical>
 8002892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002894:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002898:	b25b      	sxtb	r3, r3
 800289a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289e:	d103      	bne.n	80028a8 <xQueueReceive+0x128>
 80028a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80028ae:	b25b      	sxtb	r3, r3
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b4:	d103      	bne.n	80028be <xQueueReceive+0x13e>
 80028b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80028be:	f001 fcc5 	bl	800424c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028c2:	1d3a      	adds	r2, r7, #4
 80028c4:	f107 0310 	add.w	r3, r7, #16
 80028c8:	4611      	mov	r1, r2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 fe0a 	bl	80034e4 <xTaskCheckForTimeOut>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d123      	bne.n	800291e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028d8:	f000 f916 	bl	8002b08 <prvIsQueueEmpty>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d017      	beq.n	8002912 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80028e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e4:	3324      	adds	r3, #36	@ 0x24
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	4611      	mov	r1, r2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 fd2e 	bl	800334c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80028f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028f2:	f000 f8b7 	bl	8002a64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80028f6:	f000 fb65 	bl	8002fc4 <xTaskResumeAll>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d189      	bne.n	8002814 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002900:	4b0f      	ldr	r3, [pc, #60]	@ (8002940 <xQueueReceive+0x1c0>)
 8002902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	f3bf 8f4f 	dsb	sy
 800290c:	f3bf 8f6f 	isb	sy
 8002910:	e780      	b.n	8002814 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002912:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002914:	f000 f8a6 	bl	8002a64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002918:	f000 fb54 	bl	8002fc4 <xTaskResumeAll>
 800291c:	e77a      	b.n	8002814 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800291e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002920:	f000 f8a0 	bl	8002a64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002924:	f000 fb4e 	bl	8002fc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002928:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800292a:	f000 f8ed 	bl	8002b08 <prvIsQueueEmpty>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	f43f af6f 	beq.w	8002814 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002936:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002938:	4618      	mov	r0, r3
 800293a:	3730      	adds	r7, #48	@ 0x30
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	e000ed04 	.word	0xe000ed04

08002944 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002958:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10d      	bne.n	800297e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d14d      	bne.n	8002a06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	4618      	mov	r0, r3
 8002970:	f000 fefc 	bl	800376c <xTaskPriorityDisinherit>
 8002974:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	e043      	b.n	8002a06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d119      	bne.n	80029b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6858      	ldr	r0, [r3, #4]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298c:	461a      	mov	r2, r3
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	f001 ff58 	bl	8004844 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299c:	441a      	add	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d32b      	bcc.n	8002a06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	e026      	b.n	8002a06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	68d8      	ldr	r0, [r3, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	461a      	mov	r2, r3
 80029c2:	68b9      	ldr	r1, [r7, #8]
 80029c4:	f001 ff3e 	bl	8004844 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d0:	425b      	negs	r3, r3
 80029d2:	441a      	add	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d207      	bcs.n	80029f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ec:	425b      	negs	r3, r3
 80029ee:	441a      	add	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d105      	bne.n	8002a06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002a0e:	697b      	ldr	r3, [r7, #20]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d018      	beq.n	8002a5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	441a      	add	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d303      	bcc.n	8002a4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68d9      	ldr	r1, [r3, #12]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a54:	461a      	mov	r2, r3
 8002a56:	6838      	ldr	r0, [r7, #0]
 8002a58:	f001 fef4 	bl	8004844 <memcpy>
	}
}
 8002a5c:	bf00      	nop
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002a6c:	f001 fbbc 	bl	80041e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a78:	e011      	b.n	8002a9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d012      	beq.n	8002aa8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3324      	adds	r3, #36	@ 0x24
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 fcb2 	bl	80033f0 <xTaskRemoveFromEventList>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002a92:	f000 fd8b 	bl	80035ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	dce9      	bgt.n	8002a7a <prvUnlockQueue+0x16>
 8002aa6:	e000      	b.n	8002aaa <prvUnlockQueue+0x46>
					break;
 8002aa8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	22ff      	movs	r2, #255	@ 0xff
 8002aae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002ab2:	f001 fbcb 	bl	800424c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002ab6:	f001 fb97 	bl	80041e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ac0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ac2:	e011      	b.n	8002ae8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d012      	beq.n	8002af2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3310      	adds	r3, #16
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 fc8d 	bl	80033f0 <xTaskRemoveFromEventList>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002adc:	f000 fd66 	bl	80035ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002ae0:	7bbb      	ldrb	r3, [r7, #14]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ae8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	dce9      	bgt.n	8002ac4 <prvUnlockQueue+0x60>
 8002af0:	e000      	b.n	8002af4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002af2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	22ff      	movs	r2, #255	@ 0xff
 8002af8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002afc:	f001 fba6 	bl	800424c <vPortExitCritical>
}
 8002b00:	bf00      	nop
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b10:	f001 fb6a 	bl	80041e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d102      	bne.n	8002b22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	e001      	b.n	8002b26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b26:	f001 fb91 	bl	800424c <vPortExitCritical>

	return xReturn;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b3c:	f001 fb54 	bl	80041e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d102      	bne.n	8002b52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	e001      	b.n	8002b56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b56:	f001 fb79 	bl	800424c <vPortExitCritical>

	return xReturn;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	e014      	b.n	8002b9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b74:	4a0f      	ldr	r2, [pc, #60]	@ (8002bb4 <vQueueAddToRegistry+0x50>)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10b      	bne.n	8002b98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b80:	490c      	ldr	r1, [pc, #48]	@ (8002bb4 <vQueueAddToRegistry+0x50>)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb4 <vQueueAddToRegistry+0x50>)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4413      	add	r3, r2
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002b96:	e006      	b.n	8002ba6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2b07      	cmp	r3, #7
 8002ba2:	d9e7      	bls.n	8002b74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002ba4:	bf00      	nop
 8002ba6:	bf00      	nop
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	2000007c 	.word	0x2000007c

08002bb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002bc8:	f001 fb0e 	bl	80041e8 <vPortEnterCritical>
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002bd2:	b25b      	sxtb	r3, r3
 8002bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd8:	d103      	bne.n	8002be2 <vQueueWaitForMessageRestricted+0x2a>
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002be8:	b25b      	sxtb	r3, r3
 8002bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bee:	d103      	bne.n	8002bf8 <vQueueWaitForMessageRestricted+0x40>
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002bf8:	f001 fb28 	bl	800424c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d106      	bne.n	8002c12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	3324      	adds	r3, #36	@ 0x24
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 fbc3 	bl	8003398 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002c12:	6978      	ldr	r0, [r7, #20]
 8002c14:	f7ff ff26 	bl	8002a64 <prvUnlockQueue>
	}
 8002c18:	bf00      	nop
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08c      	sub	sp, #48	@ 0x30
 8002c24:	af04      	add	r7, sp, #16
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c30:	88fb      	ldrh	r3, [r7, #6]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4618      	mov	r0, r3
 8002c36:	f001 fbf9 	bl	800442c <pvPortMalloc>
 8002c3a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00e      	beq.n	8002c60 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c42:	2058      	movs	r0, #88	@ 0x58
 8002c44:	f001 fbf2 	bl	800442c <pvPortMalloc>
 8002c48:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c56:	e005      	b.n	8002c64 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c58:	6978      	ldr	r0, [r7, #20]
 8002c5a:	f001 fcaf 	bl	80045bc <vPortFree>
 8002c5e:	e001      	b.n	8002c64 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d013      	beq.n	8002c92 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c6a:	88fa      	ldrh	r2, [r7, #6]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	9303      	str	r3, [sp, #12]
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	9302      	str	r3, [sp, #8]
 8002c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c76:	9301      	str	r3, [sp, #4]
 8002c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 f80e 	bl	8002ca2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c86:	69f8      	ldr	r0, [r7, #28]
 8002c88:	f000 f89c 	bl	8002dc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	61bb      	str	r3, [r7, #24]
 8002c90:	e002      	b.n	8002c98 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c92:	f04f 33ff 	mov.w	r3, #4294967295
 8002c96:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002c98:	69bb      	ldr	r3, [r7, #24]
	}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3720      	adds	r7, #32
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b088      	sub	sp, #32
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	60f8      	str	r0, [r7, #12]
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	461a      	mov	r2, r3
 8002cba:	21a5      	movs	r1, #165	@ 0xa5
 8002cbc:	f001 fd96 	bl	80047ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	f023 0307 	bic.w	r3, r3, #7
 8002cd8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00b      	beq.n	8002cfc <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ce8:	f383 8811 	msr	BASEPRI, r3
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	f3bf 8f4f 	dsb	sy
 8002cf4:	617b      	str	r3, [r7, #20]
}
 8002cf6:	bf00      	nop
 8002cf8:	bf00      	nop
 8002cfa:	e7fd      	b.n	8002cf8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d01f      	beq.n	8002d42 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	e012      	b.n	8002d2e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	7819      	ldrb	r1, [r3, #0]
 8002d10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	4413      	add	r3, r2
 8002d16:	3334      	adds	r3, #52	@ 0x34
 8002d18:	460a      	mov	r2, r1
 8002d1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	4413      	add	r3, r2
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d006      	beq.n	8002d36 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	61fb      	str	r3, [r7, #28]
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	2b09      	cmp	r3, #9
 8002d32:	d9e9      	bls.n	8002d08 <prvInitialiseNewTask+0x66>
 8002d34:	e000      	b.n	8002d38 <prvInitialiseNewTask+0x96>
			{
				break;
 8002d36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002d40:	e003      	b.n	8002d4a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d901      	bls.n	8002d54 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d50:	2304      	movs	r3, #4
 8002d52:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d58:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d5e:	649a      	str	r2, [r3, #72]	@ 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8002d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d62:	2200      	movs	r2, #0
 8002d64:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d68:	3304      	adds	r3, #4
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fa0c 	bl	8002188 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d72:	3318      	adds	r3, #24
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fa07 	bl	8002188 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d82:	f1c3 0205 	rsb	r2, r3, #5
 8002d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d8e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d92:	2200      	movs	r2, #0
 8002d94:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	68f9      	ldr	r1, [r7, #12]
 8002da2:	69b8      	ldr	r0, [r7, #24]
 8002da4:	f001 f8ee 	bl	8003f84 <pxPortInitialiseStack>
 8002da8:	4602      	mov	r2, r0
 8002daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d002      	beq.n	8002dba <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002db8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002dba:	bf00      	nop
 8002dbc:	3720      	adds	r7, #32
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002dcc:	f001 fa0c 	bl	80041e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002dd0:	4b2c      	ldr	r3, [pc, #176]	@ (8002e84 <prvAddNewTaskToReadyList+0xc0>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	4a2b      	ldr	r2, [pc, #172]	@ (8002e84 <prvAddNewTaskToReadyList+0xc0>)
 8002dd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002dda:	4b2b      	ldr	r3, [pc, #172]	@ (8002e88 <prvAddNewTaskToReadyList+0xc4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d109      	bne.n	8002df6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002de2:	4a29      	ldr	r2, [pc, #164]	@ (8002e88 <prvAddNewTaskToReadyList+0xc4>)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002de8:	4b26      	ldr	r3, [pc, #152]	@ (8002e84 <prvAddNewTaskToReadyList+0xc0>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d110      	bne.n	8002e12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002df0:	f000 fc00 	bl	80035f4 <prvInitialiseTaskLists>
 8002df4:	e00d      	b.n	8002e12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002df6:	4b25      	ldr	r3, [pc, #148]	@ (8002e8c <prvAddNewTaskToReadyList+0xc8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002dfe:	4b22      	ldr	r3, [pc, #136]	@ (8002e88 <prvAddNewTaskToReadyList+0xc4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d802      	bhi.n	8002e12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e0c:	4a1e      	ldr	r2, [pc, #120]	@ (8002e88 <prvAddNewTaskToReadyList+0xc4>)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e12:	4b1f      	ldr	r3, [pc, #124]	@ (8002e90 <prvAddNewTaskToReadyList+0xcc>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	3301      	adds	r3, #1
 8002e18:	4a1d      	ldr	r2, [pc, #116]	@ (8002e90 <prvAddNewTaskToReadyList+0xcc>)
 8002e1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e1c:	4b1c      	ldr	r3, [pc, #112]	@ (8002e90 <prvAddNewTaskToReadyList+0xcc>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	641a      	str	r2, [r3, #64]	@ 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e28:	2201      	movs	r2, #1
 8002e2a:	409a      	lsls	r2, r3
 8002e2c:	4b19      	ldr	r3, [pc, #100]	@ (8002e94 <prvAddNewTaskToReadyList+0xd0>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	4a18      	ldr	r2, [pc, #96]	@ (8002e94 <prvAddNewTaskToReadyList+0xd0>)
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4a15      	ldr	r2, [pc, #84]	@ (8002e98 <prvAddNewTaskToReadyList+0xd4>)
 8002e44:	441a      	add	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	f7ff f9a8 	bl	80021a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e52:	f001 f9fb 	bl	800424c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e56:	4b0d      	ldr	r3, [pc, #52]	@ (8002e8c <prvAddNewTaskToReadyList+0xc8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00e      	beq.n	8002e7c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e88 <prvAddNewTaskToReadyList+0xc4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d207      	bcs.n	8002e7c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e9c <prvAddNewTaskToReadyList+0xd8>)
 8002e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e7c:	bf00      	nop
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000194 	.word	0x20000194
 8002e88:	200000bc 	.word	0x200000bc
 8002e8c:	200001a0 	.word	0x200001a0
 8002e90:	200001b0 	.word	0x200001b0
 8002e94:	2000019c 	.word	0x2000019c
 8002e98:	200000c0 	.word	0x200000c0
 8002e9c:	e000ed04 	.word	0xe000ed04

08002ea0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d018      	beq.n	8002ee4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002eb2:	4b14      	ldr	r3, [pc, #80]	@ (8002f04 <vTaskDelay+0x64>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00b      	beq.n	8002ed2 <vTaskDelay+0x32>
	__asm volatile
 8002eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ebe:	f383 8811 	msr	BASEPRI, r3
 8002ec2:	f3bf 8f6f 	isb	sy
 8002ec6:	f3bf 8f4f 	dsb	sy
 8002eca:	60bb      	str	r3, [r7, #8]
}
 8002ecc:	bf00      	nop
 8002ece:	bf00      	nop
 8002ed0:	e7fd      	b.n	8002ece <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002ed2:	f000 f869 	bl	8002fa8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 fccf 	bl	800387c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002ede:	f000 f871 	bl	8002fc4 <xTaskResumeAll>
 8002ee2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d107      	bne.n	8002efa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002eea:	4b07      	ldr	r3, [pc, #28]	@ (8002f08 <vTaskDelay+0x68>)
 8002eec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002efa:	bf00      	nop
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	200001bc 	.word	0x200001bc
 8002f08:	e000ed04 	.word	0xe000ed04

08002f0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002f12:	4b1f      	ldr	r3, [pc, #124]	@ (8002f90 <vTaskStartScheduler+0x84>)
 8002f14:	9301      	str	r3, [sp, #4]
 8002f16:	2300      	movs	r3, #0
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	2282      	movs	r2, #130	@ 0x82
 8002f1e:	491d      	ldr	r1, [pc, #116]	@ (8002f94 <vTaskStartScheduler+0x88>)
 8002f20:	481d      	ldr	r0, [pc, #116]	@ (8002f98 <vTaskStartScheduler+0x8c>)
 8002f22:	f7ff fe7d 	bl	8002c20 <xTaskCreate>
 8002f26:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d102      	bne.n	8002f34 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8002f2e:	f000 fd0b 	bl	8003948 <xTimerCreateTimerTask>
 8002f32:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d116      	bne.n	8002f68 <vTaskStartScheduler+0x5c>
	__asm volatile
 8002f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f3e:	f383 8811 	msr	BASEPRI, r3
 8002f42:	f3bf 8f6f 	isb	sy
 8002f46:	f3bf 8f4f 	dsb	sy
 8002f4a:	60bb      	str	r3, [r7, #8]
}
 8002f4c:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002f4e:	4b13      	ldr	r3, [pc, #76]	@ (8002f9c <vTaskStartScheduler+0x90>)
 8002f50:	f04f 32ff 	mov.w	r2, #4294967295
 8002f54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002f56:	4b12      	ldr	r3, [pc, #72]	@ (8002fa0 <vTaskStartScheduler+0x94>)
 8002f58:	2201      	movs	r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f5c:	4b11      	ldr	r3, [pc, #68]	@ (8002fa4 <vTaskStartScheduler+0x98>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002f62:	f001 f89d 	bl	80040a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002f66:	e00f      	b.n	8002f88 <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6e:	d10b      	bne.n	8002f88 <vTaskStartScheduler+0x7c>
	__asm volatile
 8002f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f74:	f383 8811 	msr	BASEPRI, r3
 8002f78:	f3bf 8f6f 	isb	sy
 8002f7c:	f3bf 8f4f 	dsb	sy
 8002f80:	607b      	str	r3, [r7, #4]
}
 8002f82:	bf00      	nop
 8002f84:	bf00      	nop
 8002f86:	e7fd      	b.n	8002f84 <vTaskStartScheduler+0x78>
}
 8002f88:	bf00      	nop
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	200001b8 	.word	0x200001b8
 8002f94:	08004898 	.word	0x08004898
 8002f98:	080035c5 	.word	0x080035c5
 8002f9c:	200001b4 	.word	0x200001b4
 8002fa0:	200001a0 	.word	0x200001a0
 8002fa4:	20000198 	.word	0x20000198

08002fa8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002fac:	4b04      	ldr	r3, [pc, #16]	@ (8002fc0 <vTaskSuspendAll+0x18>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	4a03      	ldr	r2, [pc, #12]	@ (8002fc0 <vTaskSuspendAll+0x18>)
 8002fb4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002fb6:	bf00      	nop
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	200001bc 	.word	0x200001bc

08002fc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002fd2:	4b42      	ldr	r3, [pc, #264]	@ (80030dc <xTaskResumeAll+0x118>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10b      	bne.n	8002ff2 <xTaskResumeAll+0x2e>
	__asm volatile
 8002fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fde:	f383 8811 	msr	BASEPRI, r3
 8002fe2:	f3bf 8f6f 	isb	sy
 8002fe6:	f3bf 8f4f 	dsb	sy
 8002fea:	603b      	str	r3, [r7, #0]
}
 8002fec:	bf00      	nop
 8002fee:	bf00      	nop
 8002ff0:	e7fd      	b.n	8002fee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002ff2:	f001 f8f9 	bl	80041e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002ff6:	4b39      	ldr	r3, [pc, #228]	@ (80030dc <xTaskResumeAll+0x118>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	4a37      	ldr	r2, [pc, #220]	@ (80030dc <xTaskResumeAll+0x118>)
 8002ffe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003000:	4b36      	ldr	r3, [pc, #216]	@ (80030dc <xTaskResumeAll+0x118>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d161      	bne.n	80030cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003008:	4b35      	ldr	r3, [pc, #212]	@ (80030e0 <xTaskResumeAll+0x11c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d05d      	beq.n	80030cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003010:	e02e      	b.n	8003070 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003012:	4b34      	ldr	r3, [pc, #208]	@ (80030e4 <xTaskResumeAll+0x120>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	3318      	adds	r3, #24
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff f91c 	bl	800225c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	3304      	adds	r3, #4
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff f917 	bl	800225c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003032:	2201      	movs	r2, #1
 8003034:	409a      	lsls	r2, r3
 8003036:	4b2c      	ldr	r3, [pc, #176]	@ (80030e8 <xTaskResumeAll+0x124>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4313      	orrs	r3, r2
 800303c:	4a2a      	ldr	r2, [pc, #168]	@ (80030e8 <xTaskResumeAll+0x124>)
 800303e:	6013      	str	r3, [r2, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4a27      	ldr	r2, [pc, #156]	@ (80030ec <xTaskResumeAll+0x128>)
 800304e:	441a      	add	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	3304      	adds	r3, #4
 8003054:	4619      	mov	r1, r3
 8003056:	4610      	mov	r0, r2
 8003058:	f7ff f8a3 	bl	80021a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003060:	4b23      	ldr	r3, [pc, #140]	@ (80030f0 <xTaskResumeAll+0x12c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003066:	429a      	cmp	r2, r3
 8003068:	d302      	bcc.n	8003070 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800306a:	4b22      	ldr	r3, [pc, #136]	@ (80030f4 <xTaskResumeAll+0x130>)
 800306c:	2201      	movs	r2, #1
 800306e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003070:	4b1c      	ldr	r3, [pc, #112]	@ (80030e4 <xTaskResumeAll+0x120>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1cc      	bne.n	8003012 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800307e:	f000 fb37 	bl	80036f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003082:	4b1d      	ldr	r3, [pc, #116]	@ (80030f8 <xTaskResumeAll+0x134>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d010      	beq.n	80030b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800308e:	f000 f847 	bl	8003120 <xTaskIncrementTick>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d002      	beq.n	800309e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003098:	4b16      	ldr	r3, [pc, #88]	@ (80030f4 <xTaskResumeAll+0x130>)
 800309a:	2201      	movs	r2, #1
 800309c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3b01      	subs	r3, #1
 80030a2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f1      	bne.n	800308e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80030aa:	4b13      	ldr	r3, [pc, #76]	@ (80030f8 <xTaskResumeAll+0x134>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80030b0:	4b10      	ldr	r3, [pc, #64]	@ (80030f4 <xTaskResumeAll+0x130>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d009      	beq.n	80030cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80030b8:	2301      	movs	r3, #1
 80030ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80030bc:	4b0f      	ldr	r3, [pc, #60]	@ (80030fc <xTaskResumeAll+0x138>)
 80030be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	f3bf 8f4f 	dsb	sy
 80030c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80030cc:	f001 f8be 	bl	800424c <vPortExitCritical>

	return xAlreadyYielded;
 80030d0:	68bb      	ldr	r3, [r7, #8]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	200001bc 	.word	0x200001bc
 80030e0:	20000194 	.word	0x20000194
 80030e4:	20000154 	.word	0x20000154
 80030e8:	2000019c 	.word	0x2000019c
 80030ec:	200000c0 	.word	0x200000c0
 80030f0:	200000bc 	.word	0x200000bc
 80030f4:	200001a8 	.word	0x200001a8
 80030f8:	200001a4 	.word	0x200001a4
 80030fc:	e000ed04 	.word	0xe000ed04

08003100 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003106:	4b05      	ldr	r3, [pc, #20]	@ (800311c <xTaskGetTickCount+0x1c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800310c:	687b      	ldr	r3, [r7, #4]
}
 800310e:	4618      	mov	r0, r3
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	20000198 	.word	0x20000198

08003120 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800312a:	4b4f      	ldr	r3, [pc, #316]	@ (8003268 <xTaskIncrementTick+0x148>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	f040 8089 	bne.w	8003246 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003134:	4b4d      	ldr	r3, [pc, #308]	@ (800326c <xTaskIncrementTick+0x14c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	3301      	adds	r3, #1
 800313a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800313c:	4a4b      	ldr	r2, [pc, #300]	@ (800326c <xTaskIncrementTick+0x14c>)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d121      	bne.n	800318c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003148:	4b49      	ldr	r3, [pc, #292]	@ (8003270 <xTaskIncrementTick+0x150>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00b      	beq.n	800316a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003156:	f383 8811 	msr	BASEPRI, r3
 800315a:	f3bf 8f6f 	isb	sy
 800315e:	f3bf 8f4f 	dsb	sy
 8003162:	603b      	str	r3, [r7, #0]
}
 8003164:	bf00      	nop
 8003166:	bf00      	nop
 8003168:	e7fd      	b.n	8003166 <xTaskIncrementTick+0x46>
 800316a:	4b41      	ldr	r3, [pc, #260]	@ (8003270 <xTaskIncrementTick+0x150>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	4b40      	ldr	r3, [pc, #256]	@ (8003274 <xTaskIncrementTick+0x154>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a3e      	ldr	r2, [pc, #248]	@ (8003270 <xTaskIncrementTick+0x150>)
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	4a3e      	ldr	r2, [pc, #248]	@ (8003274 <xTaskIncrementTick+0x154>)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	4b3e      	ldr	r3, [pc, #248]	@ (8003278 <xTaskIncrementTick+0x158>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3301      	adds	r3, #1
 8003184:	4a3c      	ldr	r2, [pc, #240]	@ (8003278 <xTaskIncrementTick+0x158>)
 8003186:	6013      	str	r3, [r2, #0]
 8003188:	f000 fab2 	bl	80036f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800318c:	4b3b      	ldr	r3, [pc, #236]	@ (800327c <xTaskIncrementTick+0x15c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	429a      	cmp	r2, r3
 8003194:	d348      	bcc.n	8003228 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003196:	4b36      	ldr	r3, [pc, #216]	@ (8003270 <xTaskIncrementTick+0x150>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d104      	bne.n	80031aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031a0:	4b36      	ldr	r3, [pc, #216]	@ (800327c <xTaskIncrementTick+0x15c>)
 80031a2:	f04f 32ff 	mov.w	r2, #4294967295
 80031a6:	601a      	str	r2, [r3, #0]
					break;
 80031a8:	e03e      	b.n	8003228 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031aa:	4b31      	ldr	r3, [pc, #196]	@ (8003270 <xTaskIncrementTick+0x150>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d203      	bcs.n	80031ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80031c2:	4a2e      	ldr	r2, [pc, #184]	@ (800327c <xTaskIncrementTick+0x15c>)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80031c8:	e02e      	b.n	8003228 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	3304      	adds	r3, #4
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff f844 	bl	800225c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d004      	beq.n	80031e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	3318      	adds	r3, #24
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff f83b 	bl	800225c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ea:	2201      	movs	r2, #1
 80031ec:	409a      	lsls	r2, r3
 80031ee:	4b24      	ldr	r3, [pc, #144]	@ (8003280 <xTaskIncrementTick+0x160>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	4a22      	ldr	r2, [pc, #136]	@ (8003280 <xTaskIncrementTick+0x160>)
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4a1f      	ldr	r2, [pc, #124]	@ (8003284 <xTaskIncrementTick+0x164>)
 8003206:	441a      	add	r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	3304      	adds	r3, #4
 800320c:	4619      	mov	r1, r3
 800320e:	4610      	mov	r0, r2
 8003210:	f7fe ffc7 	bl	80021a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003218:	4b1b      	ldr	r3, [pc, #108]	@ (8003288 <xTaskIncrementTick+0x168>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321e:	429a      	cmp	r2, r3
 8003220:	d3b9      	bcc.n	8003196 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003222:	2301      	movs	r3, #1
 8003224:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003226:	e7b6      	b.n	8003196 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003228:	4b17      	ldr	r3, [pc, #92]	@ (8003288 <xTaskIncrementTick+0x168>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800322e:	4915      	ldr	r1, [pc, #84]	@ (8003284 <xTaskIncrementTick+0x164>)
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d907      	bls.n	8003250 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8003240:	2301      	movs	r3, #1
 8003242:	617b      	str	r3, [r7, #20]
 8003244:	e004      	b.n	8003250 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003246:	4b11      	ldr	r3, [pc, #68]	@ (800328c <xTaskIncrementTick+0x16c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	3301      	adds	r3, #1
 800324c:	4a0f      	ldr	r2, [pc, #60]	@ (800328c <xTaskIncrementTick+0x16c>)
 800324e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003250:	4b0f      	ldr	r3, [pc, #60]	@ (8003290 <xTaskIncrementTick+0x170>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8003258:	2301      	movs	r3, #1
 800325a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800325c:	697b      	ldr	r3, [r7, #20]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	200001bc 	.word	0x200001bc
 800326c:	20000198 	.word	0x20000198
 8003270:	2000014c 	.word	0x2000014c
 8003274:	20000150 	.word	0x20000150
 8003278:	200001ac 	.word	0x200001ac
 800327c:	200001b4 	.word	0x200001b4
 8003280:	2000019c 	.word	0x2000019c
 8003284:	200000c0 	.word	0x200000c0
 8003288:	200000bc 	.word	0x200000bc
 800328c:	200001a4 	.word	0x200001a4
 8003290:	200001a8 	.word	0x200001a8

08003294 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800329a:	4b27      	ldr	r3, [pc, #156]	@ (8003338 <vTaskSwitchContext+0xa4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80032a2:	4b26      	ldr	r3, [pc, #152]	@ (800333c <vTaskSwitchContext+0xa8>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80032a8:	e040      	b.n	800332c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80032aa:	4b24      	ldr	r3, [pc, #144]	@ (800333c <vTaskSwitchContext+0xa8>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032b0:	4b23      	ldr	r3, [pc, #140]	@ (8003340 <vTaskSwitchContext+0xac>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	fab3 f383 	clz	r3, r3
 80032bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80032be:	7afb      	ldrb	r3, [r7, #11]
 80032c0:	f1c3 031f 	rsb	r3, r3, #31
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	491f      	ldr	r1, [pc, #124]	@ (8003344 <vTaskSwitchContext+0xb0>)
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	4613      	mov	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	440b      	add	r3, r1
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10b      	bne.n	80032f2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80032da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032de:	f383 8811 	msr	BASEPRI, r3
 80032e2:	f3bf 8f6f 	isb	sy
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	607b      	str	r3, [r7, #4]
}
 80032ec:	bf00      	nop
 80032ee:	bf00      	nop
 80032f0:	e7fd      	b.n	80032ee <vTaskSwitchContext+0x5a>
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	4613      	mov	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4a11      	ldr	r2, [pc, #68]	@ (8003344 <vTaskSwitchContext+0xb0>)
 80032fe:	4413      	add	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	3308      	adds	r3, #8
 8003314:	429a      	cmp	r2, r3
 8003316:	d104      	bne.n	8003322 <vTaskSwitchContext+0x8e>
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	605a      	str	r2, [r3, #4]
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	4a07      	ldr	r2, [pc, #28]	@ (8003348 <vTaskSwitchContext+0xb4>)
 800332a:	6013      	str	r3, [r2, #0]
}
 800332c:	bf00      	nop
 800332e:	371c      	adds	r7, #28
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	200001bc 	.word	0x200001bc
 800333c:	200001a8 	.word	0x200001a8
 8003340:	2000019c 	.word	0x2000019c
 8003344:	200000c0 	.word	0x200000c0
 8003348:	200000bc 	.word	0x200000bc

0800334c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10b      	bne.n	8003374 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800335c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003360:	f383 8811 	msr	BASEPRI, r3
 8003364:	f3bf 8f6f 	isb	sy
 8003368:	f3bf 8f4f 	dsb	sy
 800336c:	60fb      	str	r3, [r7, #12]
}
 800336e:	bf00      	nop
 8003370:	bf00      	nop
 8003372:	e7fd      	b.n	8003370 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003374:	4b07      	ldr	r3, [pc, #28]	@ (8003394 <vTaskPlaceOnEventList+0x48>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3318      	adds	r3, #24
 800337a:	4619      	mov	r1, r3
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7fe ff34 	bl	80021ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003382:	2101      	movs	r1, #1
 8003384:	6838      	ldr	r0, [r7, #0]
 8003386:	f000 fa79 	bl	800387c <prvAddCurrentTaskToDelayedList>
}
 800338a:	bf00      	nop
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	200000bc 	.word	0x200000bc

08003398 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10b      	bne.n	80033c2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80033aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ae:	f383 8811 	msr	BASEPRI, r3
 80033b2:	f3bf 8f6f 	isb	sy
 80033b6:	f3bf 8f4f 	dsb	sy
 80033ba:	617b      	str	r3, [r7, #20]
}
 80033bc:	bf00      	nop
 80033be:	bf00      	nop
 80033c0:	e7fd      	b.n	80033be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033c2:	4b0a      	ldr	r3, [pc, #40]	@ (80033ec <vTaskPlaceOnEventListRestricted+0x54>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3318      	adds	r3, #24
 80033c8:	4619      	mov	r1, r3
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f7fe fee9 	bl	80021a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80033d6:	f04f 33ff 	mov.w	r3, #4294967295
 80033da:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	68b8      	ldr	r0, [r7, #8]
 80033e0:	f000 fa4c 	bl	800387c <prvAddCurrentTaskToDelayedList>
	}
 80033e4:	bf00      	nop
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	200000bc 	.word	0x200000bc

080033f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10b      	bne.n	800341e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800340a:	f383 8811 	msr	BASEPRI, r3
 800340e:	f3bf 8f6f 	isb	sy
 8003412:	f3bf 8f4f 	dsb	sy
 8003416:	60fb      	str	r3, [r7, #12]
}
 8003418:	bf00      	nop
 800341a:	bf00      	nop
 800341c:	e7fd      	b.n	800341a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	3318      	adds	r3, #24
 8003422:	4618      	mov	r0, r3
 8003424:	f7fe ff1a 	bl	800225c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003428:	4b1d      	ldr	r3, [pc, #116]	@ (80034a0 <xTaskRemoveFromEventList+0xb0>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d11c      	bne.n	800346a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	3304      	adds	r3, #4
 8003434:	4618      	mov	r0, r3
 8003436:	f7fe ff11 	bl	800225c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800343e:	2201      	movs	r2, #1
 8003440:	409a      	lsls	r2, r3
 8003442:	4b18      	ldr	r3, [pc, #96]	@ (80034a4 <xTaskRemoveFromEventList+0xb4>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4313      	orrs	r3, r2
 8003448:	4a16      	ldr	r2, [pc, #88]	@ (80034a4 <xTaskRemoveFromEventList+0xb4>)
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003450:	4613      	mov	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4a13      	ldr	r2, [pc, #76]	@ (80034a8 <xTaskRemoveFromEventList+0xb8>)
 800345a:	441a      	add	r2, r3
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	3304      	adds	r3, #4
 8003460:	4619      	mov	r1, r3
 8003462:	4610      	mov	r0, r2
 8003464:	f7fe fe9d 	bl	80021a2 <vListInsertEnd>
 8003468:	e005      	b.n	8003476 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	3318      	adds	r3, #24
 800346e:	4619      	mov	r1, r3
 8003470:	480e      	ldr	r0, [pc, #56]	@ (80034ac <xTaskRemoveFromEventList+0xbc>)
 8003472:	f7fe fe96 	bl	80021a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800347a:	4b0d      	ldr	r3, [pc, #52]	@ (80034b0 <xTaskRemoveFromEventList+0xc0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003480:	429a      	cmp	r2, r3
 8003482:	d905      	bls.n	8003490 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003484:	2301      	movs	r3, #1
 8003486:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003488:	4b0a      	ldr	r3, [pc, #40]	@ (80034b4 <xTaskRemoveFromEventList+0xc4>)
 800348a:	2201      	movs	r2, #1
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	e001      	b.n	8003494 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003494:	697b      	ldr	r3, [r7, #20]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	200001bc 	.word	0x200001bc
 80034a4:	2000019c 	.word	0x2000019c
 80034a8:	200000c0 	.word	0x200000c0
 80034ac:	20000154 	.word	0x20000154
 80034b0:	200000bc 	.word	0x200000bc
 80034b4:	200001a8 	.word	0x200001a8

080034b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80034c0:	4b06      	ldr	r3, [pc, #24]	@ (80034dc <vTaskInternalSetTimeOutState+0x24>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80034c8:	4b05      	ldr	r3, [pc, #20]	@ (80034e0 <vTaskInternalSetTimeOutState+0x28>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	605a      	str	r2, [r3, #4]
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	200001ac 	.word	0x200001ac
 80034e0:	20000198 	.word	0x20000198

080034e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10b      	bne.n	800350c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80034f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034f8:	f383 8811 	msr	BASEPRI, r3
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	613b      	str	r3, [r7, #16]
}
 8003506:	bf00      	nop
 8003508:	bf00      	nop
 800350a:	e7fd      	b.n	8003508 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10b      	bne.n	800352a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003516:	f383 8811 	msr	BASEPRI, r3
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	60fb      	str	r3, [r7, #12]
}
 8003524:	bf00      	nop
 8003526:	bf00      	nop
 8003528:	e7fd      	b.n	8003526 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800352a:	f000 fe5d 	bl	80041e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800352e:	4b1d      	ldr	r3, [pc, #116]	@ (80035a4 <xTaskCheckForTimeOut+0xc0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003546:	d102      	bne.n	800354e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003548:	2300      	movs	r3, #0
 800354a:	61fb      	str	r3, [r7, #28]
 800354c:	e023      	b.n	8003596 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	4b15      	ldr	r3, [pc, #84]	@ (80035a8 <xTaskCheckForTimeOut+0xc4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d007      	beq.n	800356a <xTaskCheckForTimeOut+0x86>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	429a      	cmp	r2, r3
 8003562:	d302      	bcc.n	800356a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003564:	2301      	movs	r3, #1
 8003566:	61fb      	str	r3, [r7, #28]
 8003568:	e015      	b.n	8003596 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	429a      	cmp	r2, r3
 8003572:	d20b      	bcs.n	800358c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	1ad2      	subs	r2, r2, r3
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff ff99 	bl	80034b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003586:	2300      	movs	r3, #0
 8003588:	61fb      	str	r3, [r7, #28]
 800358a:	e004      	b.n	8003596 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003592:	2301      	movs	r3, #1
 8003594:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003596:	f000 fe59 	bl	800424c <vPortExitCritical>

	return xReturn;
 800359a:	69fb      	ldr	r3, [r7, #28]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3720      	adds	r7, #32
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	20000198 	.word	0x20000198
 80035a8:	200001ac 	.word	0x200001ac

080035ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80035b0:	4b03      	ldr	r3, [pc, #12]	@ (80035c0 <vTaskMissedYield+0x14>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	601a      	str	r2, [r3, #0]
}
 80035b6:	bf00      	nop
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	200001a8 	.word	0x200001a8

080035c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80035cc:	f000 f852 	bl	8003674 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80035d0:	4b06      	ldr	r3, [pc, #24]	@ (80035ec <prvIdleTask+0x28>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d9f9      	bls.n	80035cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80035d8:	4b05      	ldr	r3, [pc, #20]	@ (80035f0 <prvIdleTask+0x2c>)
 80035da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80035e8:	e7f0      	b.n	80035cc <prvIdleTask+0x8>
 80035ea:	bf00      	nop
 80035ec:	200000c0 	.word	0x200000c0
 80035f0:	e000ed04 	.word	0xe000ed04

080035f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035fa:	2300      	movs	r3, #0
 80035fc:	607b      	str	r3, [r7, #4]
 80035fe:	e00c      	b.n	800361a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4a12      	ldr	r2, [pc, #72]	@ (8003654 <prvInitialiseTaskLists+0x60>)
 800360c:	4413      	add	r3, r2
 800360e:	4618      	mov	r0, r3
 8003610:	f7fe fd9a 	bl	8002148 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3301      	adds	r3, #1
 8003618:	607b      	str	r3, [r7, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b04      	cmp	r3, #4
 800361e:	d9ef      	bls.n	8003600 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003620:	480d      	ldr	r0, [pc, #52]	@ (8003658 <prvInitialiseTaskLists+0x64>)
 8003622:	f7fe fd91 	bl	8002148 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003626:	480d      	ldr	r0, [pc, #52]	@ (800365c <prvInitialiseTaskLists+0x68>)
 8003628:	f7fe fd8e 	bl	8002148 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800362c:	480c      	ldr	r0, [pc, #48]	@ (8003660 <prvInitialiseTaskLists+0x6c>)
 800362e:	f7fe fd8b 	bl	8002148 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003632:	480c      	ldr	r0, [pc, #48]	@ (8003664 <prvInitialiseTaskLists+0x70>)
 8003634:	f7fe fd88 	bl	8002148 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003638:	480b      	ldr	r0, [pc, #44]	@ (8003668 <prvInitialiseTaskLists+0x74>)
 800363a:	f7fe fd85 	bl	8002148 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800363e:	4b0b      	ldr	r3, [pc, #44]	@ (800366c <prvInitialiseTaskLists+0x78>)
 8003640:	4a05      	ldr	r2, [pc, #20]	@ (8003658 <prvInitialiseTaskLists+0x64>)
 8003642:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003644:	4b0a      	ldr	r3, [pc, #40]	@ (8003670 <prvInitialiseTaskLists+0x7c>)
 8003646:	4a05      	ldr	r2, [pc, #20]	@ (800365c <prvInitialiseTaskLists+0x68>)
 8003648:	601a      	str	r2, [r3, #0]
}
 800364a:	bf00      	nop
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	200000c0 	.word	0x200000c0
 8003658:	20000124 	.word	0x20000124
 800365c:	20000138 	.word	0x20000138
 8003660:	20000154 	.word	0x20000154
 8003664:	20000168 	.word	0x20000168
 8003668:	20000180 	.word	0x20000180
 800366c:	2000014c 	.word	0x2000014c
 8003670:	20000150 	.word	0x20000150

08003674 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800367a:	e019      	b.n	80036b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800367c:	f000 fdb4 	bl	80041e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003680:	4b10      	ldr	r3, [pc, #64]	@ (80036c4 <prvCheckTasksWaitingTermination+0x50>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3304      	adds	r3, #4
 800368c:	4618      	mov	r0, r3
 800368e:	f7fe fde5 	bl	800225c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003692:	4b0d      	ldr	r3, [pc, #52]	@ (80036c8 <prvCheckTasksWaitingTermination+0x54>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	3b01      	subs	r3, #1
 8003698:	4a0b      	ldr	r2, [pc, #44]	@ (80036c8 <prvCheckTasksWaitingTermination+0x54>)
 800369a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800369c:	4b0b      	ldr	r3, [pc, #44]	@ (80036cc <prvCheckTasksWaitingTermination+0x58>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3b01      	subs	r3, #1
 80036a2:	4a0a      	ldr	r2, [pc, #40]	@ (80036cc <prvCheckTasksWaitingTermination+0x58>)
 80036a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80036a6:	f000 fdd1 	bl	800424c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f810 	bl	80036d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036b0:	4b06      	ldr	r3, [pc, #24]	@ (80036cc <prvCheckTasksWaitingTermination+0x58>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1e1      	bne.n	800367c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80036b8:	bf00      	nop
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20000168 	.word	0x20000168
 80036c8:	20000194 	.word	0x20000194
 80036cc:	2000017c 	.word	0x2000017c

080036d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 ff6d 	bl	80045bc <vPortFree>
			vPortFree( pxTCB );
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 ff6a 	bl	80045bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80036e8:	bf00      	nop
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003728 <prvResetNextTaskUnblockTime+0x38>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d104      	bne.n	800370a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003700:	4b0a      	ldr	r3, [pc, #40]	@ (800372c <prvResetNextTaskUnblockTime+0x3c>)
 8003702:	f04f 32ff 	mov.w	r2, #4294967295
 8003706:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003708:	e008      	b.n	800371c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800370a:	4b07      	ldr	r3, [pc, #28]	@ (8003728 <prvResetNextTaskUnblockTime+0x38>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	4a04      	ldr	r2, [pc, #16]	@ (800372c <prvResetNextTaskUnblockTime+0x3c>)
 800371a:	6013      	str	r3, [r2, #0]
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	2000014c 	.word	0x2000014c
 800372c:	200001b4 	.word	0x200001b4

08003730 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003736:	4b0b      	ldr	r3, [pc, #44]	@ (8003764 <xTaskGetSchedulerState+0x34>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d102      	bne.n	8003744 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800373e:	2301      	movs	r3, #1
 8003740:	607b      	str	r3, [r7, #4]
 8003742:	e008      	b.n	8003756 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003744:	4b08      	ldr	r3, [pc, #32]	@ (8003768 <xTaskGetSchedulerState+0x38>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d102      	bne.n	8003752 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800374c:	2302      	movs	r3, #2
 800374e:	607b      	str	r3, [r7, #4]
 8003750:	e001      	b.n	8003756 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003752:	2300      	movs	r3, #0
 8003754:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003756:	687b      	ldr	r3, [r7, #4]
	}
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	200001a0 	.word	0x200001a0
 8003768:	200001bc 	.word	0x200001bc

0800376c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d070      	beq.n	8003864 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003782:	4b3b      	ldr	r3, [pc, #236]	@ (8003870 <xTaskPriorityDisinherit+0x104>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	429a      	cmp	r2, r3
 800378a:	d00b      	beq.n	80037a4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800378c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003790:	f383 8811 	msr	BASEPRI, r3
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	60fb      	str	r3, [r7, #12]
}
 800379e:	bf00      	nop
 80037a0:	bf00      	nop
 80037a2:	e7fd      	b.n	80037a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10b      	bne.n	80037c4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80037ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b0:	f383 8811 	msr	BASEPRI, r3
 80037b4:	f3bf 8f6f 	isb	sy
 80037b8:	f3bf 8f4f 	dsb	sy
 80037bc:	60bb      	str	r3, [r7, #8]
}
 80037be:	bf00      	nop
 80037c0:	bf00      	nop
 80037c2:	e7fd      	b.n	80037c0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037c8:	1e5a      	subs	r2, r3, #1
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	64da      	str	r2, [r3, #76]	@ 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d044      	beq.n	8003864 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d140      	bne.n	8003864 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	3304      	adds	r3, #4
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fe fd38 	bl	800225c <uxListRemove>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d115      	bne.n	800381e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037f6:	491f      	ldr	r1, [pc, #124]	@ (8003874 <xTaskPriorityDisinherit+0x108>)
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10a      	bne.n	800381e <xTaskPriorityDisinherit+0xb2>
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800380c:	2201      	movs	r2, #1
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43da      	mvns	r2, r3
 8003814:	4b18      	ldr	r3, [pc, #96]	@ (8003878 <xTaskPriorityDisinherit+0x10c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4013      	ands	r3, r2
 800381a:	4a17      	ldr	r2, [pc, #92]	@ (8003878 <xTaskPriorityDisinherit+0x10c>)
 800381c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382a:	f1c3 0205 	rsb	r2, r3, #5
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003836:	2201      	movs	r2, #1
 8003838:	409a      	lsls	r2, r3
 800383a:	4b0f      	ldr	r3, [pc, #60]	@ (8003878 <xTaskPriorityDisinherit+0x10c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4313      	orrs	r3, r2
 8003840:	4a0d      	ldr	r2, [pc, #52]	@ (8003878 <xTaskPriorityDisinherit+0x10c>)
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4a08      	ldr	r2, [pc, #32]	@ (8003874 <xTaskPriorityDisinherit+0x108>)
 8003852:	441a      	add	r2, r3
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	3304      	adds	r3, #4
 8003858:	4619      	mov	r1, r3
 800385a:	4610      	mov	r0, r2
 800385c:	f7fe fca1 	bl	80021a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003860:	2301      	movs	r3, #1
 8003862:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003864:	697b      	ldr	r3, [r7, #20]
	}
 8003866:	4618      	mov	r0, r3
 8003868:	3718      	adds	r7, #24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	200000bc 	.word	0x200000bc
 8003874:	200000c0 	.word	0x200000c0
 8003878:	2000019c 	.word	0x2000019c

0800387c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003886:	4b29      	ldr	r3, [pc, #164]	@ (800392c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800388c:	4b28      	ldr	r3, [pc, #160]	@ (8003930 <prvAddCurrentTaskToDelayedList+0xb4>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3304      	adds	r3, #4
 8003892:	4618      	mov	r0, r3
 8003894:	f7fe fce2 	bl	800225c <uxListRemove>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10b      	bne.n	80038b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800389e:	4b24      	ldr	r3, [pc, #144]	@ (8003930 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a4:	2201      	movs	r2, #1
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	43da      	mvns	r2, r3
 80038ac:	4b21      	ldr	r3, [pc, #132]	@ (8003934 <prvAddCurrentTaskToDelayedList+0xb8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4013      	ands	r3, r2
 80038b2:	4a20      	ldr	r2, [pc, #128]	@ (8003934 <prvAddCurrentTaskToDelayedList+0xb8>)
 80038b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038bc:	d10a      	bne.n	80038d4 <prvAddCurrentTaskToDelayedList+0x58>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d007      	beq.n	80038d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003930 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3304      	adds	r3, #4
 80038ca:	4619      	mov	r1, r3
 80038cc:	481a      	ldr	r0, [pc, #104]	@ (8003938 <prvAddCurrentTaskToDelayedList+0xbc>)
 80038ce:	f7fe fc68 	bl	80021a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80038d2:	e026      	b.n	8003922 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4413      	add	r3, r2
 80038da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80038dc:	4b14      	ldr	r3, [pc, #80]	@ (8003930 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d209      	bcs.n	8003900 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038ec:	4b13      	ldr	r3, [pc, #76]	@ (800393c <prvAddCurrentTaskToDelayedList+0xc0>)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003930 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3304      	adds	r3, #4
 80038f6:	4619      	mov	r1, r3
 80038f8:	4610      	mov	r0, r2
 80038fa:	f7fe fc76 	bl	80021ea <vListInsert>
}
 80038fe:	e010      	b.n	8003922 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003900:	4b0f      	ldr	r3, [pc, #60]	@ (8003940 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	4b0a      	ldr	r3, [pc, #40]	@ (8003930 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	3304      	adds	r3, #4
 800390a:	4619      	mov	r1, r3
 800390c:	4610      	mov	r0, r2
 800390e:	f7fe fc6c 	bl	80021ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003912:	4b0c      	ldr	r3, [pc, #48]	@ (8003944 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	429a      	cmp	r2, r3
 800391a:	d202      	bcs.n	8003922 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800391c:	4a09      	ldr	r2, [pc, #36]	@ (8003944 <prvAddCurrentTaskToDelayedList+0xc8>)
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	6013      	str	r3, [r2, #0]
}
 8003922:	bf00      	nop
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20000198 	.word	0x20000198
 8003930:	200000bc 	.word	0x200000bc
 8003934:	2000019c 	.word	0x2000019c
 8003938:	20000180 	.word	0x20000180
 800393c:	20000150 	.word	0x20000150
 8003940:	2000014c 	.word	0x2000014c
 8003944:	200001b4 	.word	0x200001b4

08003948 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800394e:	2300      	movs	r3, #0
 8003950:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003952:	f000 fae1 	bl	8003f18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003956:	4b12      	ldr	r3, [pc, #72]	@ (80039a0 <xTimerCreateTimerTask+0x58>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00b      	beq.n	8003976 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800395e:	4b11      	ldr	r3, [pc, #68]	@ (80039a4 <xTimerCreateTimerTask+0x5c>)
 8003960:	9301      	str	r3, [sp, #4]
 8003962:	2302      	movs	r3, #2
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	2300      	movs	r3, #0
 8003968:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800396c:	490e      	ldr	r1, [pc, #56]	@ (80039a8 <xTimerCreateTimerTask+0x60>)
 800396e:	480f      	ldr	r0, [pc, #60]	@ (80039ac <xTimerCreateTimerTask+0x64>)
 8003970:	f7ff f956 	bl	8002c20 <xTaskCreate>
 8003974:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10b      	bne.n	8003994 <xTimerCreateTimerTask+0x4c>
	__asm volatile
 800397c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	603b      	str	r3, [r7, #0]
}
 800398e:	bf00      	nop
 8003990:	bf00      	nop
 8003992:	e7fd      	b.n	8003990 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8003994:	687b      	ldr	r3, [r7, #4]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	200001f0 	.word	0x200001f0
 80039a4:	200001f4 	.word	0x200001f4
 80039a8:	080048a0 	.word	0x080048a0
 80039ac:	08003ae9 	.word	0x08003ae9

080039b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b08a      	sub	sp, #40	@ 0x28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
 80039bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80039be:	2300      	movs	r3, #0
 80039c0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10b      	bne.n	80039e0 <xTimerGenericCommand+0x30>
	__asm volatile
 80039c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	623b      	str	r3, [r7, #32]
}
 80039da:	bf00      	nop
 80039dc:	bf00      	nop
 80039de:	e7fd      	b.n	80039dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80039e0:	4b19      	ldr	r3, [pc, #100]	@ (8003a48 <xTimerGenericCommand+0x98>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d02a      	beq.n	8003a3e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2b05      	cmp	r3, #5
 80039f8:	dc18      	bgt.n	8003a2c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80039fa:	f7ff fe99 	bl	8003730 <xTaskGetSchedulerState>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d109      	bne.n	8003a18 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a04:	4b10      	ldr	r3, [pc, #64]	@ (8003a48 <xTimerGenericCommand+0x98>)
 8003a06:	6818      	ldr	r0, [r3, #0]
 8003a08:	f107 0114 	add.w	r1, r7, #20
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a10:	f7fe fd18 	bl	8002444 <xQueueGenericSend>
 8003a14:	6278      	str	r0, [r7, #36]	@ 0x24
 8003a16:	e012      	b.n	8003a3e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a18:	4b0b      	ldr	r3, [pc, #44]	@ (8003a48 <xTimerGenericCommand+0x98>)
 8003a1a:	6818      	ldr	r0, [r3, #0]
 8003a1c:	f107 0114 	add.w	r1, r7, #20
 8003a20:	2300      	movs	r3, #0
 8003a22:	2200      	movs	r2, #0
 8003a24:	f7fe fd0e 	bl	8002444 <xQueueGenericSend>
 8003a28:	6278      	str	r0, [r7, #36]	@ 0x24
 8003a2a:	e008      	b.n	8003a3e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a2c:	4b06      	ldr	r3, [pc, #24]	@ (8003a48 <xTimerGenericCommand+0x98>)
 8003a2e:	6818      	ldr	r0, [r3, #0]
 8003a30:	f107 0114 	add.w	r1, r7, #20
 8003a34:	2300      	movs	r3, #0
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	f7fe fe06 	bl	8002648 <xQueueGenericSendFromISR>
 8003a3c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3728      	adds	r7, #40	@ 0x28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	200001f0 	.word	0x200001f0

08003a4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b088      	sub	sp, #32
 8003a50:	af02      	add	r7, sp, #8
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a56:	4b23      	ldr	r3, [pc, #140]	@ (8003ae4 <prvProcessExpiredTimer+0x98>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	3304      	adds	r3, #4
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7fe fbf9 	bl	800225c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d023      	beq.n	8003ac0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	699a      	ldr	r2, [r3, #24]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	18d1      	adds	r1, r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	6978      	ldr	r0, [r7, #20]
 8003a86:	f000 f8d5 	bl	8003c34 <prvInsertTimerInActiveList>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d020      	beq.n	8003ad2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003a90:	2300      	movs	r3, #0
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	2300      	movs	r3, #0
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	2100      	movs	r1, #0
 8003a9a:	6978      	ldr	r0, [r7, #20]
 8003a9c:	f7ff ff88 	bl	80039b0 <xTimerGenericCommand>
 8003aa0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d114      	bne.n	8003ad2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aac:	f383 8811 	msr	BASEPRI, r3
 8003ab0:	f3bf 8f6f 	isb	sy
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	60fb      	str	r3, [r7, #12]
}
 8003aba:	bf00      	nop
 8003abc:	bf00      	nop
 8003abe:	e7fd      	b.n	8003abc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ac6:	f023 0301 	bic.w	r3, r3, #1
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	6978      	ldr	r0, [r7, #20]
 8003ad8:	4798      	blx	r3
}
 8003ada:	bf00      	nop
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	200001e8 	.word	0x200001e8

08003ae8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003af0:	f107 0308 	add.w	r3, r7, #8
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 f859 	bl	8003bac <prvGetNextExpireTime>
 8003afa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	4619      	mov	r1, r3
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 f805 	bl	8003b10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003b06:	f000 f8d7 	bl	8003cb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b0a:	bf00      	nop
 8003b0c:	e7f0      	b.n	8003af0 <prvTimerTask+0x8>
	...

08003b10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003b1a:	f7ff fa45 	bl	8002fa8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b1e:	f107 0308 	add.w	r3, r7, #8
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 f866 	bl	8003bf4 <prvSampleTimeNow>
 8003b28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d130      	bne.n	8003b92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10a      	bne.n	8003b4c <prvProcessTimerOrBlockTask+0x3c>
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d806      	bhi.n	8003b4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003b3e:	f7ff fa41 	bl	8002fc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b42:	68f9      	ldr	r1, [r7, #12]
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff ff81 	bl	8003a4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003b4a:	e024      	b.n	8003b96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d008      	beq.n	8003b64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b52:	4b13      	ldr	r3, [pc, #76]	@ (8003ba0 <prvProcessTimerOrBlockTask+0x90>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <prvProcessTimerOrBlockTask+0x50>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <prvProcessTimerOrBlockTask+0x52>
 8003b60:	2300      	movs	r3, #0
 8003b62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b64:	4b0f      	ldr	r3, [pc, #60]	@ (8003ba4 <prvProcessTimerOrBlockTask+0x94>)
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	4619      	mov	r1, r3
 8003b72:	f7ff f821 	bl	8002bb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003b76:	f7ff fa25 	bl	8002fc4 <xTaskResumeAll>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10a      	bne.n	8003b96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003b80:	4b09      	ldr	r3, [pc, #36]	@ (8003ba8 <prvProcessTimerOrBlockTask+0x98>)
 8003b82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	f3bf 8f6f 	isb	sy
}
 8003b90:	e001      	b.n	8003b96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003b92:	f7ff fa17 	bl	8002fc4 <xTaskResumeAll>
}
 8003b96:	bf00      	nop
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	200001ec 	.word	0x200001ec
 8003ba4:	200001f0 	.word	0x200001f0
 8003ba8:	e000ed04 	.word	0xe000ed04

08003bac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf0 <prvGetNextExpireTime+0x44>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <prvGetNextExpireTime+0x16>
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	e000      	b.n	8003bc4 <prvGetNextExpireTime+0x18>
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d105      	bne.n	8003bdc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003bd0:	4b07      	ldr	r3, [pc, #28]	@ (8003bf0 <prvGetNextExpireTime+0x44>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	e001      	b.n	8003be0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003be0:	68fb      	ldr	r3, [r7, #12]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	200001e8 	.word	0x200001e8

08003bf4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003bfc:	f7ff fa80 	bl	8003100 <xTaskGetTickCount>
 8003c00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003c02:	4b0b      	ldr	r3, [pc, #44]	@ (8003c30 <prvSampleTimeNow+0x3c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d205      	bcs.n	8003c18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003c0c:	f000 f91e 	bl	8003e4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	e002      	b.n	8003c1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003c1e:	4a04      	ldr	r2, [pc, #16]	@ (8003c30 <prvSampleTimeNow+0x3c>)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003c24:	68fb      	ldr	r3, [r7, #12]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	200001f8 	.word	0x200001f8

08003c34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d812      	bhi.n	8003c80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	1ad2      	subs	r2, r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d302      	bcc.n	8003c6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	e01b      	b.n	8003ca6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c6e:	4b10      	ldr	r3, [pc, #64]	@ (8003cb0 <prvInsertTimerInActiveList+0x7c>)
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	3304      	adds	r3, #4
 8003c76:	4619      	mov	r1, r3
 8003c78:	4610      	mov	r0, r2
 8003c7a:	f7fe fab6 	bl	80021ea <vListInsert>
 8003c7e:	e012      	b.n	8003ca6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d206      	bcs.n	8003c96 <prvInsertTimerInActiveList+0x62>
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d302      	bcc.n	8003c96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003c90:	2301      	movs	r3, #1
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	e007      	b.n	8003ca6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c96:	4b07      	ldr	r3, [pc, #28]	@ (8003cb4 <prvInsertTimerInActiveList+0x80>)
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	f7fe faa2 	bl	80021ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003ca6:	697b      	ldr	r3, [r7, #20]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	200001ec 	.word	0x200001ec
 8003cb4:	200001e8 	.word	0x200001e8

08003cb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08c      	sub	sp, #48	@ 0x30
 8003cbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003cbe:	e0b2      	b.n	8003e26 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f2c0 80af 	blt.w	8003e26 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d004      	beq.n	8003cde <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fe fabf 	bl	800225c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003cde:	1d3b      	adds	r3, r7, #4
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff ff87 	bl	8003bf4 <prvSampleTimeNow>
 8003ce6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2b09      	cmp	r3, #9
 8003cec:	f200 8098 	bhi.w	8003e20 <prvProcessReceivedCommands+0x168>
 8003cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf8 <prvProcessReceivedCommands+0x40>)
 8003cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf6:	bf00      	nop
 8003cf8:	08003d21 	.word	0x08003d21
 8003cfc:	08003d21 	.word	0x08003d21
 8003d00:	08003d21 	.word	0x08003d21
 8003d04:	08003d97 	.word	0x08003d97
 8003d08:	08003dab 	.word	0x08003dab
 8003d0c:	08003df7 	.word	0x08003df7
 8003d10:	08003d21 	.word	0x08003d21
 8003d14:	08003d21 	.word	0x08003d21
 8003d18:	08003d97 	.word	0x08003d97
 8003d1c:	08003dab 	.word	0x08003dab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	18d1      	adds	r1, r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a3a      	ldr	r2, [r7, #32]
 8003d3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d40:	f7ff ff78 	bl	8003c34 <prvInsertTimerInActiveList>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d06c      	beq.n	8003e24 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d061      	beq.n	8003e24 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	441a      	add	r2, r3
 8003d68:	2300      	movs	r3, #0
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	2100      	movs	r1, #0
 8003d70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d72:	f7ff fe1d 	bl	80039b0 <xTimerGenericCommand>
 8003d76:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d152      	bne.n	8003e24 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8003d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	61bb      	str	r3, [r7, #24]
}
 8003d90:	bf00      	nop
 8003d92:	bf00      	nop
 8003d94:	e7fd      	b.n	8003d92 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d9c:	f023 0301 	bic.w	r3, r3, #1
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003da8:	e03d      	b.n	8003e26 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003db0:	f043 0301 	orr.w	r3, r3, #1
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10b      	bne.n	8003de2 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8003dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	617b      	str	r3, [r7, #20]
}
 8003ddc:	bf00      	nop
 8003dde:	bf00      	nop
 8003de0:	e7fd      	b.n	8003dde <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de4:	699a      	ldr	r2, [r3, #24]
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	18d1      	adds	r1, r2, r3
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	6a3a      	ldr	r2, [r7, #32]
 8003dee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003df0:	f7ff ff20 	bl	8003c34 <prvInsertTimerInActiveList>
					break;
 8003df4:	e017      	b.n	8003e26 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d103      	bne.n	8003e0c <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8003e04:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e06:	f000 fbd9 	bl	80045bc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003e0a:	e00c      	b.n	8003e26 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e12:	f023 0301 	bic.w	r3, r3, #1
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003e1e:	e002      	b.n	8003e26 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8003e20:	bf00      	nop
 8003e22:	e000      	b.n	8003e26 <prvProcessReceivedCommands+0x16e>
					break;
 8003e24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e26:	4b08      	ldr	r3, [pc, #32]	@ (8003e48 <prvProcessReceivedCommands+0x190>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f107 0108 	add.w	r1, r7, #8
 8003e2e:	2200      	movs	r2, #0
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fe fca5 	bl	8002780 <xQueueReceive>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f47f af41 	bne.w	8003cc0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003e3e:	bf00      	nop
 8003e40:	bf00      	nop
 8003e42:	3728      	adds	r7, #40	@ 0x28
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	200001f0 	.word	0x200001f0

08003e4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b088      	sub	sp, #32
 8003e50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e52:	e049      	b.n	8003ee8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e54:	4b2e      	ldr	r3, [pc, #184]	@ (8003f10 <prvSwitchTimerLists+0xc4>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e5e:	4b2c      	ldr	r3, [pc, #176]	@ (8003f10 <prvSwitchTimerLists+0xc4>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7fe f9f5 	bl	800225c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d02f      	beq.n	8003ee8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	4413      	add	r3, r2
 8003e90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d90e      	bls.n	8003eb8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8003f10 <prvSwitchTimerLists+0xc4>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	3304      	adds	r3, #4
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	f7fe f99a 	bl	80021ea <vListInsert>
 8003eb6:	e017      	b.n	8003ee8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003eb8:	2300      	movs	r3, #0
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f7ff fd74 	bl	80039b0 <xTimerGenericCommand>
 8003ec8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10b      	bne.n	8003ee8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8003ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed4:	f383 8811 	msr	BASEPRI, r3
 8003ed8:	f3bf 8f6f 	isb	sy
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	603b      	str	r3, [r7, #0]
}
 8003ee2:	bf00      	nop
 8003ee4:	bf00      	nop
 8003ee6:	e7fd      	b.n	8003ee4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ee8:	4b09      	ldr	r3, [pc, #36]	@ (8003f10 <prvSwitchTimerLists+0xc4>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1b0      	bne.n	8003e54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003ef2:	4b07      	ldr	r3, [pc, #28]	@ (8003f10 <prvSwitchTimerLists+0xc4>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003ef8:	4b06      	ldr	r3, [pc, #24]	@ (8003f14 <prvSwitchTimerLists+0xc8>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a04      	ldr	r2, [pc, #16]	@ (8003f10 <prvSwitchTimerLists+0xc4>)
 8003efe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003f00:	4a04      	ldr	r2, [pc, #16]	@ (8003f14 <prvSwitchTimerLists+0xc8>)
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	6013      	str	r3, [r2, #0]
}
 8003f06:	bf00      	nop
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	200001e8 	.word	0x200001e8
 8003f14:	200001ec 	.word	0x200001ec

08003f18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003f1c:	f000 f964 	bl	80041e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003f20:	4b12      	ldr	r3, [pc, #72]	@ (8003f6c <prvCheckForValidListAndQueue+0x54>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d11d      	bne.n	8003f64 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8003f28:	4811      	ldr	r0, [pc, #68]	@ (8003f70 <prvCheckForValidListAndQueue+0x58>)
 8003f2a:	f7fe f90d 	bl	8002148 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003f2e:	4811      	ldr	r0, [pc, #68]	@ (8003f74 <prvCheckForValidListAndQueue+0x5c>)
 8003f30:	f7fe f90a 	bl	8002148 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003f34:	4b10      	ldr	r3, [pc, #64]	@ (8003f78 <prvCheckForValidListAndQueue+0x60>)
 8003f36:	4a0e      	ldr	r2, [pc, #56]	@ (8003f70 <prvCheckForValidListAndQueue+0x58>)
 8003f38:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003f3a:	4b10      	ldr	r3, [pc, #64]	@ (8003f7c <prvCheckForValidListAndQueue+0x64>)
 8003f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8003f74 <prvCheckForValidListAndQueue+0x5c>)
 8003f3e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003f40:	2200      	movs	r2, #0
 8003f42:	210c      	movs	r1, #12
 8003f44:	200a      	movs	r0, #10
 8003f46:	f7fe fa1d 	bl	8002384 <xQueueGenericCreate>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4a07      	ldr	r2, [pc, #28]	@ (8003f6c <prvCheckForValidListAndQueue+0x54>)
 8003f4e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003f50:	4b06      	ldr	r3, [pc, #24]	@ (8003f6c <prvCheckForValidListAndQueue+0x54>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d005      	beq.n	8003f64 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003f58:	4b04      	ldr	r3, [pc, #16]	@ (8003f6c <prvCheckForValidListAndQueue+0x54>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4908      	ldr	r1, [pc, #32]	@ (8003f80 <prvCheckForValidListAndQueue+0x68>)
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fe fe00 	bl	8002b64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f64:	f000 f972 	bl	800424c <vPortExitCritical>
}
 8003f68:	bf00      	nop
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	200001f0 	.word	0x200001f0
 8003f70:	200001c0 	.word	0x200001c0
 8003f74:	200001d4 	.word	0x200001d4
 8003f78:	200001e8 	.word	0x200001e8
 8003f7c:	200001ec 	.word	0x200001ec
 8003f80:	080048a8 	.word	0x080048a8

08003f84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	3b04      	subs	r3, #4
 8003f94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003f9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	3b04      	subs	r3, #4
 8003fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f023 0201 	bic.w	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	3b04      	subs	r3, #4
 8003fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003fb4:	4a0c      	ldr	r2, [pc, #48]	@ (8003fe8 <pxPortInitialiseStack+0x64>)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	3b14      	subs	r3, #20
 8003fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	3b04      	subs	r3, #4
 8003fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f06f 0202 	mvn.w	r2, #2
 8003fd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	3b20      	subs	r3, #32
 8003fd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003fda:	68fb      	ldr	r3, [r7, #12]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	08003fed 	.word	0x08003fed

08003fec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003ff6:	4b13      	ldr	r3, [pc, #76]	@ (8004044 <prvTaskExitError+0x58>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffe:	d00b      	beq.n	8004018 <prvTaskExitError+0x2c>
	__asm volatile
 8004000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	60fb      	str	r3, [r7, #12]
}
 8004012:	bf00      	nop
 8004014:	bf00      	nop
 8004016:	e7fd      	b.n	8004014 <prvTaskExitError+0x28>
	__asm volatile
 8004018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800401c:	f383 8811 	msr	BASEPRI, r3
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	60bb      	str	r3, [r7, #8]
}
 800402a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800402c:	bf00      	nop
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0fc      	beq.n	800402e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004034:	bf00      	nop
 8004036:	bf00      	nop
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	2000000c 	.word	0x2000000c
	...

08004050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004050:	4b07      	ldr	r3, [pc, #28]	@ (8004070 <pxCurrentTCBConst2>)
 8004052:	6819      	ldr	r1, [r3, #0]
 8004054:	6808      	ldr	r0, [r1, #0]
 8004056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800405a:	f380 8809 	msr	PSP, r0
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f04f 0000 	mov.w	r0, #0
 8004066:	f380 8811 	msr	BASEPRI, r0
 800406a:	4770      	bx	lr
 800406c:	f3af 8000 	nop.w

08004070 <pxCurrentTCBConst2>:
 8004070:	200000bc 	.word	0x200000bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop

08004078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004078:	4808      	ldr	r0, [pc, #32]	@ (800409c <prvPortStartFirstTask+0x24>)
 800407a:	6800      	ldr	r0, [r0, #0]
 800407c:	6800      	ldr	r0, [r0, #0]
 800407e:	f380 8808 	msr	MSP, r0
 8004082:	f04f 0000 	mov.w	r0, #0
 8004086:	f380 8814 	msr	CONTROL, r0
 800408a:	b662      	cpsie	i
 800408c:	b661      	cpsie	f
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	df00      	svc	0
 8004098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800409a:	bf00      	nop
 800409c:	e000ed08 	.word	0xe000ed08

080040a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80040a6:	4b47      	ldr	r3, [pc, #284]	@ (80041c4 <xPortStartScheduler+0x124>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a47      	ldr	r2, [pc, #284]	@ (80041c8 <xPortStartScheduler+0x128>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d10b      	bne.n	80040c8 <xPortStartScheduler+0x28>
	__asm volatile
 80040b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f3bf 8f6f 	isb	sy
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	613b      	str	r3, [r7, #16]
}
 80040c2:	bf00      	nop
 80040c4:	bf00      	nop
 80040c6:	e7fd      	b.n	80040c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80040c8:	4b3e      	ldr	r3, [pc, #248]	@ (80041c4 <xPortStartScheduler+0x124>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a3f      	ldr	r2, [pc, #252]	@ (80041cc <xPortStartScheduler+0x12c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d10b      	bne.n	80040ea <xPortStartScheduler+0x4a>
	__asm volatile
 80040d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d6:	f383 8811 	msr	BASEPRI, r3
 80040da:	f3bf 8f6f 	isb	sy
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	60fb      	str	r3, [r7, #12]
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop
 80040e8:	e7fd      	b.n	80040e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80040ea:	4b39      	ldr	r3, [pc, #228]	@ (80041d0 <xPortStartScheduler+0x130>)
 80040ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	22ff      	movs	r2, #255	@ 0xff
 80040fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	b2db      	uxtb	r3, r3
 8004102:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	b2db      	uxtb	r3, r3
 8004108:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800410c:	b2da      	uxtb	r2, r3
 800410e:	4b31      	ldr	r3, [pc, #196]	@ (80041d4 <xPortStartScheduler+0x134>)
 8004110:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004112:	4b31      	ldr	r3, [pc, #196]	@ (80041d8 <xPortStartScheduler+0x138>)
 8004114:	2207      	movs	r2, #7
 8004116:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004118:	e009      	b.n	800412e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800411a:	4b2f      	ldr	r3, [pc, #188]	@ (80041d8 <xPortStartScheduler+0x138>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	3b01      	subs	r3, #1
 8004120:	4a2d      	ldr	r2, [pc, #180]	@ (80041d8 <xPortStartScheduler+0x138>)
 8004122:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004124:	78fb      	ldrb	r3, [r7, #3]
 8004126:	b2db      	uxtb	r3, r3
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	b2db      	uxtb	r3, r3
 800412c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800412e:	78fb      	ldrb	r3, [r7, #3]
 8004130:	b2db      	uxtb	r3, r3
 8004132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004136:	2b80      	cmp	r3, #128	@ 0x80
 8004138:	d0ef      	beq.n	800411a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800413a:	4b27      	ldr	r3, [pc, #156]	@ (80041d8 <xPortStartScheduler+0x138>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f1c3 0307 	rsb	r3, r3, #7
 8004142:	2b04      	cmp	r3, #4
 8004144:	d00b      	beq.n	800415e <xPortStartScheduler+0xbe>
	__asm volatile
 8004146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	60bb      	str	r3, [r7, #8]
}
 8004158:	bf00      	nop
 800415a:	bf00      	nop
 800415c:	e7fd      	b.n	800415a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800415e:	4b1e      	ldr	r3, [pc, #120]	@ (80041d8 <xPortStartScheduler+0x138>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	021b      	lsls	r3, r3, #8
 8004164:	4a1c      	ldr	r2, [pc, #112]	@ (80041d8 <xPortStartScheduler+0x138>)
 8004166:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004168:	4b1b      	ldr	r3, [pc, #108]	@ (80041d8 <xPortStartScheduler+0x138>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004170:	4a19      	ldr	r2, [pc, #100]	@ (80041d8 <xPortStartScheduler+0x138>)
 8004172:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	b2da      	uxtb	r2, r3
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800417c:	4b17      	ldr	r3, [pc, #92]	@ (80041dc <xPortStartScheduler+0x13c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a16      	ldr	r2, [pc, #88]	@ (80041dc <xPortStartScheduler+0x13c>)
 8004182:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004186:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004188:	4b14      	ldr	r3, [pc, #80]	@ (80041dc <xPortStartScheduler+0x13c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a13      	ldr	r2, [pc, #76]	@ (80041dc <xPortStartScheduler+0x13c>)
 800418e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004192:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004194:	f000 f8da 	bl	800434c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004198:	4b11      	ldr	r3, [pc, #68]	@ (80041e0 <xPortStartScheduler+0x140>)
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800419e:	f000 f8f9 	bl	8004394 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80041a2:	4b10      	ldr	r3, [pc, #64]	@ (80041e4 <xPortStartScheduler+0x144>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a0f      	ldr	r2, [pc, #60]	@ (80041e4 <xPortStartScheduler+0x144>)
 80041a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80041ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80041ae:	f7ff ff63 	bl	8004078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80041b2:	f7ff f86f 	bl	8003294 <vTaskSwitchContext>
	prvTaskExitError();
 80041b6:	f7ff ff19 	bl	8003fec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	e000ed00 	.word	0xe000ed00
 80041c8:	410fc271 	.word	0x410fc271
 80041cc:	410fc270 	.word	0x410fc270
 80041d0:	e000e400 	.word	0xe000e400
 80041d4:	200001fc 	.word	0x200001fc
 80041d8:	20000200 	.word	0x20000200
 80041dc:	e000ed20 	.word	0xe000ed20
 80041e0:	2000000c 	.word	0x2000000c
 80041e4:	e000ef34 	.word	0xe000ef34

080041e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
	__asm volatile
 80041ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f2:	f383 8811 	msr	BASEPRI, r3
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	607b      	str	r3, [r7, #4]
}
 8004200:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004202:	4b10      	ldr	r3, [pc, #64]	@ (8004244 <vPortEnterCritical+0x5c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3301      	adds	r3, #1
 8004208:	4a0e      	ldr	r2, [pc, #56]	@ (8004244 <vPortEnterCritical+0x5c>)
 800420a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800420c:	4b0d      	ldr	r3, [pc, #52]	@ (8004244 <vPortEnterCritical+0x5c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d110      	bne.n	8004236 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004214:	4b0c      	ldr	r3, [pc, #48]	@ (8004248 <vPortEnterCritical+0x60>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00b      	beq.n	8004236 <vPortEnterCritical+0x4e>
	__asm volatile
 800421e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	603b      	str	r3, [r7, #0]
}
 8004230:	bf00      	nop
 8004232:	bf00      	nop
 8004234:	e7fd      	b.n	8004232 <vPortEnterCritical+0x4a>
	}
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	2000000c 	.word	0x2000000c
 8004248:	e000ed04 	.word	0xe000ed04

0800424c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004252:	4b12      	ldr	r3, [pc, #72]	@ (800429c <vPortExitCritical+0x50>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10b      	bne.n	8004272 <vPortExitCritical+0x26>
	__asm volatile
 800425a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800425e:	f383 8811 	msr	BASEPRI, r3
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	607b      	str	r3, [r7, #4]
}
 800426c:	bf00      	nop
 800426e:	bf00      	nop
 8004270:	e7fd      	b.n	800426e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004272:	4b0a      	ldr	r3, [pc, #40]	@ (800429c <vPortExitCritical+0x50>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3b01      	subs	r3, #1
 8004278:	4a08      	ldr	r2, [pc, #32]	@ (800429c <vPortExitCritical+0x50>)
 800427a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800427c:	4b07      	ldr	r3, [pc, #28]	@ (800429c <vPortExitCritical+0x50>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d105      	bne.n	8004290 <vPortExitCritical+0x44>
 8004284:	2300      	movs	r3, #0
 8004286:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	f383 8811 	msr	BASEPRI, r3
}
 800428e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	2000000c 	.word	0x2000000c

080042a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80042a0:	f3ef 8009 	mrs	r0, PSP
 80042a4:	f3bf 8f6f 	isb	sy
 80042a8:	4b15      	ldr	r3, [pc, #84]	@ (8004300 <pxCurrentTCBConst>)
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	f01e 0f10 	tst.w	lr, #16
 80042b0:	bf08      	it	eq
 80042b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80042b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ba:	6010      	str	r0, [r2, #0]
 80042bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80042c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80042c4:	f380 8811 	msr	BASEPRI, r0
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f7fe ffe0 	bl	8003294 <vTaskSwitchContext>
 80042d4:	f04f 0000 	mov.w	r0, #0
 80042d8:	f380 8811 	msr	BASEPRI, r0
 80042dc:	bc09      	pop	{r0, r3}
 80042de:	6819      	ldr	r1, [r3, #0]
 80042e0:	6808      	ldr	r0, [r1, #0]
 80042e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042e6:	f01e 0f10 	tst.w	lr, #16
 80042ea:	bf08      	it	eq
 80042ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80042f0:	f380 8809 	msr	PSP, r0
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	f3af 8000 	nop.w

08004300 <pxCurrentTCBConst>:
 8004300:	200000bc 	.word	0x200000bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004304:	bf00      	nop
 8004306:	bf00      	nop

08004308 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
	__asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	607b      	str	r3, [r7, #4]
}
 8004320:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004322:	f7fe fefd 	bl	8003120 <xTaskIncrementTick>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800432c:	4b06      	ldr	r3, [pc, #24]	@ (8004348 <SysTick_Handler+0x40>)
 800432e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	2300      	movs	r3, #0
 8004336:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	f383 8811 	msr	BASEPRI, r3
}
 800433e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004340:	bf00      	nop
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	e000ed04 	.word	0xe000ed04

0800434c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004350:	4b0b      	ldr	r3, [pc, #44]	@ (8004380 <vPortSetupTimerInterrupt+0x34>)
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004356:	4b0b      	ldr	r3, [pc, #44]	@ (8004384 <vPortSetupTimerInterrupt+0x38>)
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800435c:	4b0a      	ldr	r3, [pc, #40]	@ (8004388 <vPortSetupTimerInterrupt+0x3c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a0a      	ldr	r2, [pc, #40]	@ (800438c <vPortSetupTimerInterrupt+0x40>)
 8004362:	fba2 2303 	umull	r2, r3, r2, r3
 8004366:	099b      	lsrs	r3, r3, #6
 8004368:	4a09      	ldr	r2, [pc, #36]	@ (8004390 <vPortSetupTimerInterrupt+0x44>)
 800436a:	3b01      	subs	r3, #1
 800436c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800436e:	4b04      	ldr	r3, [pc, #16]	@ (8004380 <vPortSetupTimerInterrupt+0x34>)
 8004370:	2207      	movs	r2, #7
 8004372:	601a      	str	r2, [r3, #0]
}
 8004374:	bf00      	nop
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	e000e010 	.word	0xe000e010
 8004384:	e000e018 	.word	0xe000e018
 8004388:	20000000 	.word	0x20000000
 800438c:	10624dd3 	.word	0x10624dd3
 8004390:	e000e014 	.word	0xe000e014

08004394 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004394:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80043a4 <vPortEnableVFP+0x10>
 8004398:	6801      	ldr	r1, [r0, #0]
 800439a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800439e:	6001      	str	r1, [r0, #0]
 80043a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80043a2:	bf00      	nop
 80043a4:	e000ed88 	.word	0xe000ed88

080043a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80043ae:	f3ef 8305 	mrs	r3, IPSR
 80043b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b0f      	cmp	r3, #15
 80043b8:	d915      	bls.n	80043e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80043ba:	4a18      	ldr	r2, [pc, #96]	@ (800441c <vPortValidateInterruptPriority+0x74>)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4413      	add	r3, r2
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80043c4:	4b16      	ldr	r3, [pc, #88]	@ (8004420 <vPortValidateInterruptPriority+0x78>)
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	7afa      	ldrb	r2, [r7, #11]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d20b      	bcs.n	80043e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80043ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	607b      	str	r3, [r7, #4]
}
 80043e0:	bf00      	nop
 80043e2:	bf00      	nop
 80043e4:	e7fd      	b.n	80043e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80043e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004424 <vPortValidateInterruptPriority+0x7c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80043ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004428 <vPortValidateInterruptPriority+0x80>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d90b      	bls.n	800440e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80043f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	603b      	str	r3, [r7, #0]
}
 8004408:	bf00      	nop
 800440a:	bf00      	nop
 800440c:	e7fd      	b.n	800440a <vPortValidateInterruptPriority+0x62>
	}
 800440e:	bf00      	nop
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	e000e3f0 	.word	0xe000e3f0
 8004420:	200001fc 	.word	0x200001fc
 8004424:	e000ed0c 	.word	0xe000ed0c
 8004428:	20000200 	.word	0x20000200

0800442c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08a      	sub	sp, #40	@ 0x28
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004434:	2300      	movs	r3, #0
 8004436:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004438:	f7fe fdb6 	bl	8002fa8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800443c:	4b5a      	ldr	r3, [pc, #360]	@ (80045a8 <pvPortMalloc+0x17c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004444:	f000 f916 	bl	8004674 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004448:	4b58      	ldr	r3, [pc, #352]	@ (80045ac <pvPortMalloc+0x180>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4013      	ands	r3, r2
 8004450:	2b00      	cmp	r3, #0
 8004452:	f040 8090 	bne.w	8004576 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d01e      	beq.n	800449a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800445c:	2208      	movs	r2, #8
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4413      	add	r3, r2
 8004462:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	2b00      	cmp	r3, #0
 800446c:	d015      	beq.n	800449a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f023 0307 	bic.w	r3, r3, #7
 8004474:	3308      	adds	r3, #8
 8004476:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00b      	beq.n	800449a <pvPortMalloc+0x6e>
	__asm volatile
 8004482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	617b      	str	r3, [r7, #20]
}
 8004494:	bf00      	nop
 8004496:	bf00      	nop
 8004498:	e7fd      	b.n	8004496 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d06a      	beq.n	8004576 <pvPortMalloc+0x14a>
 80044a0:	4b43      	ldr	r3, [pc, #268]	@ (80045b0 <pvPortMalloc+0x184>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d865      	bhi.n	8004576 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80044aa:	4b42      	ldr	r3, [pc, #264]	@ (80045b4 <pvPortMalloc+0x188>)
 80044ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80044ae:	4b41      	ldr	r3, [pc, #260]	@ (80045b4 <pvPortMalloc+0x188>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044b4:	e004      	b.n	80044c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80044b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80044ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d903      	bls.n	80044d2 <pvPortMalloc+0xa6>
 80044ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f1      	bne.n	80044b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80044d2:	4b35      	ldr	r3, [pc, #212]	@ (80045a8 <pvPortMalloc+0x17c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044d8:	429a      	cmp	r2, r3
 80044da:	d04c      	beq.n	8004576 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2208      	movs	r2, #8
 80044e2:	4413      	add	r3, r2
 80044e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	1ad2      	subs	r2, r2, r3
 80044f6:	2308      	movs	r3, #8
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d920      	bls.n	8004540 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80044fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4413      	add	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00b      	beq.n	8004528 <pvPortMalloc+0xfc>
	__asm volatile
 8004510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	613b      	str	r3, [r7, #16]
}
 8004522:	bf00      	nop
 8004524:	bf00      	nop
 8004526:	e7fd      	b.n	8004524 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	1ad2      	subs	r2, r2, r3
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800453a:	69b8      	ldr	r0, [r7, #24]
 800453c:	f000 f8fc 	bl	8004738 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004540:	4b1b      	ldr	r3, [pc, #108]	@ (80045b0 <pvPortMalloc+0x184>)
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	4a19      	ldr	r2, [pc, #100]	@ (80045b0 <pvPortMalloc+0x184>)
 800454c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800454e:	4b18      	ldr	r3, [pc, #96]	@ (80045b0 <pvPortMalloc+0x184>)
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	4b19      	ldr	r3, [pc, #100]	@ (80045b8 <pvPortMalloc+0x18c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d203      	bcs.n	8004562 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800455a:	4b15      	ldr	r3, [pc, #84]	@ (80045b0 <pvPortMalloc+0x184>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a16      	ldr	r2, [pc, #88]	@ (80045b8 <pvPortMalloc+0x18c>)
 8004560:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	4b11      	ldr	r3, [pc, #68]	@ (80045ac <pvPortMalloc+0x180>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	431a      	orrs	r2, r3
 800456c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004576:	f7fe fd25 	bl	8002fc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00b      	beq.n	800459c <pvPortMalloc+0x170>
	__asm volatile
 8004584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	60fb      	str	r3, [r7, #12]
}
 8004596:	bf00      	nop
 8004598:	bf00      	nop
 800459a:	e7fd      	b.n	8004598 <pvPortMalloc+0x16c>
	return pvReturn;
 800459c:	69fb      	ldr	r3, [r7, #28]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3728      	adds	r7, #40	@ 0x28
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	20012e0c 	.word	0x20012e0c
 80045ac:	20012e18 	.word	0x20012e18
 80045b0:	20012e10 	.word	0x20012e10
 80045b4:	20012e04 	.word	0x20012e04
 80045b8:	20012e14 	.word	0x20012e14

080045bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d04a      	beq.n	8004664 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80045ce:	2308      	movs	r3, #8
 80045d0:	425b      	negs	r3, r3
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	4413      	add	r3, r2
 80045d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	4b22      	ldr	r3, [pc, #136]	@ (800466c <vPortFree+0xb0>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4013      	ands	r3, r2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10b      	bne.n	8004602 <vPortFree+0x46>
	__asm volatile
 80045ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ee:	f383 8811 	msr	BASEPRI, r3
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	f3bf 8f4f 	dsb	sy
 80045fa:	60fb      	str	r3, [r7, #12]
}
 80045fc:	bf00      	nop
 80045fe:	bf00      	nop
 8004600:	e7fd      	b.n	80045fe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00b      	beq.n	8004622 <vPortFree+0x66>
	__asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	60bb      	str	r3, [r7, #8]
}
 800461c:	bf00      	nop
 800461e:	bf00      	nop
 8004620:	e7fd      	b.n	800461e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	4b11      	ldr	r3, [pc, #68]	@ (800466c <vPortFree+0xb0>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4013      	ands	r3, r2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d019      	beq.n	8004664 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d115      	bne.n	8004664 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	4b0b      	ldr	r3, [pc, #44]	@ (800466c <vPortFree+0xb0>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	43db      	mvns	r3, r3
 8004642:	401a      	ands	r2, r3
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004648:	f7fe fcae 	bl	8002fa8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	4b07      	ldr	r3, [pc, #28]	@ (8004670 <vPortFree+0xb4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4413      	add	r3, r2
 8004656:	4a06      	ldr	r2, [pc, #24]	@ (8004670 <vPortFree+0xb4>)
 8004658:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800465a:	6938      	ldr	r0, [r7, #16]
 800465c:	f000 f86c 	bl	8004738 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004660:	f7fe fcb0 	bl	8002fc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004664:	bf00      	nop
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	20012e18 	.word	0x20012e18
 8004670:	20012e10 	.word	0x20012e10

08004674 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800467a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800467e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004680:	4b27      	ldr	r3, [pc, #156]	@ (8004720 <prvHeapInit+0xac>)
 8004682:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00c      	beq.n	80046a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	3307      	adds	r3, #7
 8004692:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0307 	bic.w	r3, r3, #7
 800469a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004720 <prvHeapInit+0xac>)
 80046a4:	4413      	add	r3, r2
 80046a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80046ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004724 <prvHeapInit+0xb0>)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80046b2:	4b1c      	ldr	r3, [pc, #112]	@ (8004724 <prvHeapInit+0xb0>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	4413      	add	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80046c0:	2208      	movs	r2, #8
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	1a9b      	subs	r3, r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0307 	bic.w	r3, r3, #7
 80046ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4a15      	ldr	r2, [pc, #84]	@ (8004728 <prvHeapInit+0xb4>)
 80046d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80046d6:	4b14      	ldr	r3, [pc, #80]	@ (8004728 <prvHeapInit+0xb4>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2200      	movs	r2, #0
 80046dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80046de:	4b12      	ldr	r3, [pc, #72]	@ (8004728 <prvHeapInit+0xb4>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	1ad2      	subs	r2, r2, r3
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80046f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004728 <prvHeapInit+0xb4>)
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	4a0a      	ldr	r2, [pc, #40]	@ (800472c <prvHeapInit+0xb8>)
 8004702:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	4a09      	ldr	r2, [pc, #36]	@ (8004730 <prvHeapInit+0xbc>)
 800470a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800470c:	4b09      	ldr	r3, [pc, #36]	@ (8004734 <prvHeapInit+0xc0>)
 800470e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004712:	601a      	str	r2, [r3, #0]
}
 8004714:	bf00      	nop
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	20000204 	.word	0x20000204
 8004724:	20012e04 	.word	0x20012e04
 8004728:	20012e0c 	.word	0x20012e0c
 800472c:	20012e14 	.word	0x20012e14
 8004730:	20012e10 	.word	0x20012e10
 8004734:	20012e18 	.word	0x20012e18

08004738 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004740:	4b28      	ldr	r3, [pc, #160]	@ (80047e4 <prvInsertBlockIntoFreeList+0xac>)
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	e002      	b.n	800474c <prvInsertBlockIntoFreeList+0x14>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	60fb      	str	r3, [r7, #12]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	429a      	cmp	r2, r3
 8004754:	d8f7      	bhi.n	8004746 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	4413      	add	r3, r2
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	429a      	cmp	r2, r3
 8004766:	d108      	bne.n	800477a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	441a      	add	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	441a      	add	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d118      	bne.n	80047c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	4b15      	ldr	r3, [pc, #84]	@ (80047e8 <prvInsertBlockIntoFreeList+0xb0>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	429a      	cmp	r2, r3
 8004798:	d00d      	beq.n	80047b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	441a      	add	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	e008      	b.n	80047c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80047b6:	4b0c      	ldr	r3, [pc, #48]	@ (80047e8 <prvInsertBlockIntoFreeList+0xb0>)
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	e003      	b.n	80047c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d002      	beq.n	80047d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047d6:	bf00      	nop
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	20012e04 	.word	0x20012e04
 80047e8:	20012e0c 	.word	0x20012e0c

080047ec <memset>:
 80047ec:	4402      	add	r2, r0
 80047ee:	4603      	mov	r3, r0
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d100      	bne.n	80047f6 <memset+0xa>
 80047f4:	4770      	bx	lr
 80047f6:	f803 1b01 	strb.w	r1, [r3], #1
 80047fa:	e7f9      	b.n	80047f0 <memset+0x4>

080047fc <__libc_init_array>:
 80047fc:	b570      	push	{r4, r5, r6, lr}
 80047fe:	4d0d      	ldr	r5, [pc, #52]	@ (8004834 <__libc_init_array+0x38>)
 8004800:	4c0d      	ldr	r4, [pc, #52]	@ (8004838 <__libc_init_array+0x3c>)
 8004802:	1b64      	subs	r4, r4, r5
 8004804:	10a4      	asrs	r4, r4, #2
 8004806:	2600      	movs	r6, #0
 8004808:	42a6      	cmp	r6, r4
 800480a:	d109      	bne.n	8004820 <__libc_init_array+0x24>
 800480c:	4d0b      	ldr	r5, [pc, #44]	@ (800483c <__libc_init_array+0x40>)
 800480e:	4c0c      	ldr	r4, [pc, #48]	@ (8004840 <__libc_init_array+0x44>)
 8004810:	f000 f826 	bl	8004860 <_init>
 8004814:	1b64      	subs	r4, r4, r5
 8004816:	10a4      	asrs	r4, r4, #2
 8004818:	2600      	movs	r6, #0
 800481a:	42a6      	cmp	r6, r4
 800481c:	d105      	bne.n	800482a <__libc_init_array+0x2e>
 800481e:	bd70      	pop	{r4, r5, r6, pc}
 8004820:	f855 3b04 	ldr.w	r3, [r5], #4
 8004824:	4798      	blx	r3
 8004826:	3601      	adds	r6, #1
 8004828:	e7ee      	b.n	8004808 <__libc_init_array+0xc>
 800482a:	f855 3b04 	ldr.w	r3, [r5], #4
 800482e:	4798      	blx	r3
 8004830:	3601      	adds	r6, #1
 8004832:	e7f2      	b.n	800481a <__libc_init_array+0x1e>
 8004834:	080048d0 	.word	0x080048d0
 8004838:	080048d0 	.word	0x080048d0
 800483c:	080048d0 	.word	0x080048d0
 8004840:	080048d4 	.word	0x080048d4

08004844 <memcpy>:
 8004844:	440a      	add	r2, r1
 8004846:	4291      	cmp	r1, r2
 8004848:	f100 33ff 	add.w	r3, r0, #4294967295
 800484c:	d100      	bne.n	8004850 <memcpy+0xc>
 800484e:	4770      	bx	lr
 8004850:	b510      	push	{r4, lr}
 8004852:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004856:	f803 4f01 	strb.w	r4, [r3, #1]!
 800485a:	4291      	cmp	r1, r2
 800485c:	d1f9      	bne.n	8004852 <memcpy+0xe>
 800485e:	bd10      	pop	{r4, pc}

08004860 <_init>:
 8004860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004862:	bf00      	nop
 8004864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004866:	bc08      	pop	{r3}
 8004868:	469e      	mov	lr, r3
 800486a:	4770      	bx	lr

0800486c <_fini>:
 800486c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486e:	bf00      	nop
 8004870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004872:	bc08      	pop	{r3}
 8004874:	469e      	mov	lr, r3
 8004876:	4770      	bx	lr
